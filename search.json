[{"path":"https://rundel.github.io/parsermd/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Colin Rundel Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"parsermd","dir":"Articles","previous_headings":"","what":"parsermd","title":"Getting Started","text":"goal parsermd extract content R Markdown file allow programmatic interactions document’s contents (.e. code chunks markdown text). goal capture fundamental structure document attempt parse every detail Rmd. Specifically, yaml front matter, markdown text, R code read text lines allowing processed using tools.","code":""},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"installation","dir":"Articles","previous_headings":"parsermd","what":"Installation","title":"Getting Started","text":"parsermd can installed CRAN : can install latest development version parsermd GitHub :","code":"install.packages(\"parsermd\") remotes::install_github(\"rundel/parsermd\") library(parsermd)"},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"parsing-rmds","dir":"Articles","previous_headings":"parsermd","what":"Parsing Rmds","title":"Getting Started","text":"basic example shows basic abstract syntax tree (AST) results parsing simple Rmd file, R Markdown document parsed stored flat, ordered list object containing tagged elements. default package present hierarchical view document chunks markdown text nested within headings, shown default print method rmd_ast objects. prefer see underlying flat structure, can printed setting use_headings = FALSE print. Additionally, ease manipulation AST package supports transformation object tidy tibble as_tibble .data.frame (return tibble). possible convert data frames back rmd_ast. Finally, can also convert rmd_ast back R Markdown document via as_document","code":"rmd = parsermd::parse_rmd(system.file(\"minimal.Rmd\", package = \"parsermd\")) print(rmd) #> ├── YAML [4 lines] #> ├── Heading [h1] - Setup #> │   └── Chunk [r, 1 opt, 1 lines] - setup #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [6 lines] #>     │   ├── Chunk [r, 1 lines] - cars #>     │   └── Chunk [r, 1 lines] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [2 lines] #>         ├── Chunk [r, 1 opt, 1 lines] - pressure #>         └── Markdown [2 lines] print(rmd, use_headings = FALSE) #> ├── YAML [4 lines] #> ├── Heading [h1] - Setup #> ├── Chunk [r, 1 opt, 1 lines] - setup #> ├── Heading [h1] - Content #> ├── Heading [h2] - R Markdown #> ├── Markdown [6 lines] #> ├── Chunk [r, 1 lines] - cars #> ├── Chunk [r, 1 lines] - unnamed-chunk-1 #> ├── Heading [h2] - Including Plots #> ├── Markdown [2 lines] #> ├── Chunk [r, 1 opt, 1 lines] - pressure #> └── Markdown [2 lines] as_tibble(rmd) #> # A tibble: 12 × 5 #>    sec_h1  sec_h2          type          label           ast            #>    <chr>   <chr>           <chr>         <chr>           <rmd_ast>      #>  1 NA      NA              rmd_yaml_list NA              <yaml>         #>  2 Setup   NA              rmd_heading   NA              <heading [h1]> #>  3 Setup   NA              rmd_chunk     setup           <chunk [r]>    #>  4 Content NA              rmd_heading   NA              <heading [h1]> #>  5 Content R Markdown      rmd_heading   NA              <heading [h2]> #>  6 Content R Markdown      rmd_markdown  NA              <rmd_mrkd [6]> #>  7 Content R Markdown      rmd_chunk     cars            <chunk [r]>    #>  8 Content R Markdown      rmd_chunk     unnamed-chunk-1 <chunk [r]>    #>  9 Content Including Plots rmd_heading   NA              <heading [h2]> #> 10 Content Including Plots rmd_markdown  NA              <rmd_mrkd [2]> #> 11 Content Including Plots rmd_chunk     pressure        <chunk [r]>    #> 12 Content Including Plots rmd_markdown  NA              <rmd_mrkd [2]> as_ast( as_tibble(rmd) ) #> ├── YAML [4 lines] #> ├── Heading [h1] - Setup #> │   └── Chunk [r, 1 opt, 1 lines] - setup #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [6 lines] #>     │   ├── Chunk [r, 1 lines] - cars #>     │   └── Chunk [r, 1 lines] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [2 lines] #>         ├── Chunk [r, 1 opt, 1 lines] - pressure #>         └── Markdown [2 lines] cat(   as_document(rmd),   sep = \"\\n\" ) #> --- #> title: Minimal #> author: Colin Rundel #> date: 7/21/2020 #> output: html_document #> --- #>  #> # Setup #>  #> ```{r setup, include = FALSE} #> knitr::opts_chunk$set(echo = TRUE) #> ``` #>  #> # Content #>  #> ## R Markdown #>  #> This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML,  #> PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>. #>  #> When you click the **Knit** button a document will be generated that includes both content as well  #> as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: #>  #>  #> ```{r cars} #> summary(cars) #> ``` #>  #> ```{r unnamed-chunk-1} #> knitr::knit_patterns$get() #> ``` #>  #> ## Including Plots #>  #> You can also embed plots, for example: #>  #>  #> ```{r pressure, echo = FALSE} #> plot(pressure) #> ``` #>  #> Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code  #> that generated the plot."},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"working-with-the-ast","dir":"Articles","previous_headings":"parsermd","what":"Working with the AST","title":"Getting Started","text":"parsed R Markdown document, variety things can new abstract syntax tree (ast). demonstrate basic functionality within parsermd manipulate edit objects well check properties. Say interested examining solution student entered Exercise 1 - can get access using rmd_select function selection helper functions, specifically by_section helper. view content instead AST can use as_document() function, Note gives us Exercise 1 Solution headings contained markdown text, wanted markdown text can refine selector include nodes type rmd_markdown via has_type helper. approach uses tidyselect & operator within selection find intersection selectors by_section(c(\"Exercise 1\", \"Solution\")) has_type(\"rmd_markdown\"). Alternative result can achieved chaining multiple rmd_selects together,","code":"rmd = parse_rmd(system.file(\"hw01-student.Rmd\", package=\"parsermd\")) rmd #> ├── YAML [2 lines] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 1 opt, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [2 lines] #> │   └── Heading [h4] - Solution #> │       └── Markdown [5 lines] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [2 lines] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [2 lines] #> │       ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> │       ├── Markdown [2 lines] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [2 lines] #>     └── Heading [h4] - Solution #>         ├── Chunk [r, 2 opts, 5 lines] - plot-star #>         └── Chunk [r, 2 lines] - cor-star rmd_select(rmd, by_section( c(\"Exercise 1\", \"Solution\") )) #> └── Heading [h3] - Exercise 1 #>     └── Heading [h4] - Solution #>         └── Markdown [5 lines] rmd_select(rmd, by_section( c(\"Exercise 1\", \"Solution\") )) %>%   as_document() #>  [1] \"### Exercise 1\"                                      #>  [2] \"\"                                                    #>  [3] \"#### Solution\"                                       #>  [4] \"\"                                                    #>  [5] \"2 columns, 13 rows, 3 variables: \"                   #>  [6] \"dataset: indicates which dataset the data are from \" #>  [7] \"x: x-values \"                                        #>  [8] \"y: y-values \"                                        #>  [9] \"\"                                                    #> [10] \"\" rmd_select(rmd, by_section(c(\"Exercise 1\", \"Solution\")) & has_type(\"rmd_markdown\")) %>%   as_document() #> [1] \"2 columns, 13 rows, 3 variables: \"                   #> [2] \"dataset: indicates which dataset the data are from \" #> [3] \"x: x-values \"                                        #> [4] \"y: y-values \"                                        #> [5] \"\"                                                    #> [6] \"\" rmd_select(rmd, by_section(c(\"Exercise 1\", \"Solution\"))) %>%   rmd_select(has_type(\"rmd_markdown\")) %>%   as_document() #> [1] \"2 columns, 13 rows, 3 variables: \"                   #> [2] \"dataset: indicates which dataset the data are from \" #> [3] \"x: x-values \"                                        #> [4] \"y: y-values \"                                        #> [5] \"\"                                                    #> [6] \"\""},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"wildcards","dir":"Articles","previous_headings":"parsermd > Working with the AST","what":"Wildcards","title":"Getting Started","text":"One useful feature by_section() has_label() selection helpers support glob style pattern matching. can following extract solutions document: Similarly, wanted just extract chunks involve plotting can match chunk labels “plot” prefix,","code":"rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\"))) #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [5 lines] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [2 lines] #> │       ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> │       ├── Markdown [2 lines] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Chunk [r, 2 opts, 5 lines] - plot-star #>         └── Chunk [r, 2 lines] - cor-star rmd_select(rmd, has_label(\"plot*\")) #> ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> └── Chunk [r, 2 opts, 5 lines] - plot-star"},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"ast-as-a-tibble","dir":"Articles","previous_headings":"parsermd > Working with the AST","what":"ast as a tibble","title":"Getting Started","text":"mentioned earlier, ast can also represented tibble, case construct several columns using properties ast (sections, type, chunk label). functions also work tibble representation, allow manipulations underlying ast. complete ast store directly ast column, can also manipulate tibble using dplyr similar packages changes persist. example can use rmd_node_length function return number lines various nodes ast add new length column tibble. Now can apply rmd_select updated tibble see new lines column maintained. Note using rmd_select function optional can also accomplish task using dplyr::filter similar approach , possible mix match parsermd’s built-functions preferred data manipulation packages. One small note caution converting back ast, as_ast, document, as_document, structure ast column matters changes made section columns, type column, label column affect output way. particularly important headings filtered , columns may still appear tibble longer ast - rmd_select attempts avoid recalculating specific columns part subsetting process.","code":"tbl = as_tibble(rmd) tbl #> # A tibble: 19 × 5 #>    sec_h3        sec_h4   type          label         ast            #>    <chr>         <chr>    <chr>         <chr>         <rmd_ast>      #>  1 NA            NA       rmd_yaml_list NA            <yaml>         #>  2 Load packages NA       rmd_heading   NA            <heading [h3]> #>  3 Load packages NA       rmd_chunk     load-packages <chunk [r]>    #>  4 Exercise 1    NA       rmd_heading   NA            <heading [h3]> #>  5 Exercise 1    NA       rmd_markdown  NA            <rmd_mrkd [2]> #>  6 Exercise 1    Solution rmd_heading   NA            <heading [h4]> #>  7 Exercise 1    Solution rmd_markdown  NA            <rmd_mrkd [5]> #>  8 Exercise 2    NA       rmd_heading   NA            <heading [h3]> #>  9 Exercise 2    NA       rmd_markdown  NA            <rmd_mrkd [2]> #> 10 Exercise 2    Solution rmd_heading   NA            <heading [h4]> #> 11 Exercise 2    Solution rmd_markdown  NA            <rmd_mrkd [2]> #> 12 Exercise 2    Solution rmd_chunk     plot-dino     <chunk [r]>    #> 13 Exercise 2    Solution rmd_markdown  NA            <rmd_mrkd [2]> #> 14 Exercise 2    Solution rmd_chunk     cor-dino      <chunk [r]>    #> 15 Exercise 3    NA       rmd_heading   NA            <heading [h3]> #> 16 Exercise 3    NA       rmd_markdown  NA            <rmd_mrkd [2]> #> 17 Exercise 3    Solution rmd_heading   NA            <heading [h4]> #> 18 Exercise 3    Solution rmd_chunk     plot-star     <chunk [r]>    #> 19 Exercise 3    Solution rmd_chunk     cor-star      <chunk [r]> rmd_select(tbl, by_section(c(\"Exercise *\", \"Solution\"))) #> # A tibble: 13 × 5 #>    sec_h3     sec_h4   type         label     ast            #>    <chr>      <chr>    <chr>        <chr>     <rmd_ast>      #>  1 Exercise 1 NA       rmd_heading  NA        <heading [h3]> #>  2 Exercise 1 Solution rmd_heading  NA        <heading [h4]> #>  3 Exercise 1 Solution rmd_markdown NA        <rmd_mrkd [5]> #>  4 Exercise 2 NA       rmd_heading  NA        <heading [h3]> #>  5 Exercise 2 Solution rmd_heading  NA        <heading [h4]> #>  6 Exercise 2 Solution rmd_markdown NA        <rmd_mrkd [2]> #>  7 Exercise 2 Solution rmd_chunk    plot-dino <chunk [r]>    #>  8 Exercise 2 Solution rmd_markdown NA        <rmd_mrkd [2]> #>  9 Exercise 2 Solution rmd_chunk    cor-dino  <chunk [r]>    #> 10 Exercise 3 NA       rmd_heading  NA        <heading [h3]> #> 11 Exercise 3 Solution rmd_heading  NA        <heading [h4]> #> 12 Exercise 3 Solution rmd_chunk    plot-star <chunk [r]>    #> 13 Exercise 3 Solution rmd_chunk    cor-star  <chunk [r]> tbl_lines = tbl %>%   dplyr::mutate(lines = rmd_node_length(ast))  tbl_lines #> # A tibble: 19 × 6 #>    sec_h3        sec_h4   type          label         ast            lines #>    <chr>         <chr>    <chr>         <chr>         <rmd_ast>      <int> #>  1 NA            NA       rmd_yaml_list NA            <yaml>             2 #>  2 Load packages NA       rmd_heading   NA            <heading [h3]>    NA #>  3 Load packages NA       rmd_chunk     load-packages <chunk [r]>        2 #>  4 Exercise 1    NA       rmd_heading   NA            <heading [h3]>    NA #>  5 Exercise 1    NA       rmd_markdown  NA            <rmd_mrkd [2]>     2 #>  6 Exercise 1    Solution rmd_heading   NA            <heading [h4]>    NA #>  7 Exercise 1    Solution rmd_markdown  NA            <rmd_mrkd [5]>     5 #>  8 Exercise 2    NA       rmd_heading   NA            <heading [h3]>    NA #>  9 Exercise 2    NA       rmd_markdown  NA            <rmd_mrkd [2]>     2 #> 10 Exercise 2    Solution rmd_heading   NA            <heading [h4]>    NA #> 11 Exercise 2    Solution rmd_markdown  NA            <rmd_mrkd [2]>     2 #> 12 Exercise 2    Solution rmd_chunk     plot-dino     <chunk [r]>        5 #> 13 Exercise 2    Solution rmd_markdown  NA            <rmd_mrkd [2]>     2 #> 14 Exercise 2    Solution rmd_chunk     cor-dino      <chunk [r]>        2 #> 15 Exercise 3    NA       rmd_heading   NA            <heading [h3]>    NA #> 16 Exercise 3    NA       rmd_markdown  NA            <rmd_mrkd [2]>     2 #> 17 Exercise 3    Solution rmd_heading   NA            <heading [h4]>    NA #> 18 Exercise 3    Solution rmd_chunk     plot-star     <chunk [r]>        5 #> 19 Exercise 3    Solution rmd_chunk     cor-star      <chunk [r]>        2 rmd_select(tbl_lines, by_section(c(\"Exercise 2\", \"Solution\"))) #> # A tibble: 6 × 6 #>   sec_h3     sec_h4   type         label     ast            lines #>   <chr>      <chr>    <chr>        <chr>     <rmd_ast>      <int> #> 1 Exercise 2 NA       rmd_heading  NA        <heading [h3]>    NA #> 2 Exercise 2 Solution rmd_heading  NA        <heading [h4]>    NA #> 3 Exercise 2 Solution rmd_markdown NA        <rmd_mrkd [2]>     2 #> 4 Exercise 2 Solution rmd_chunk    plot-dino <chunk [r]>        5 #> 5 Exercise 2 Solution rmd_markdown NA        <rmd_mrkd [2]>     2 #> 6 Exercise 2 Solution rmd_chunk    cor-dino  <chunk [r]>        2 tbl_lines %>%   dplyr::filter(sec_h3 == \"Exercise 2\", sec_h4 == \"Solution\") #> # A tibble: 5 × 6 #>   sec_h3     sec_h4   type         label     ast            lines #>   <chr>      <chr>    <chr>        <chr>     <rmd_ast>      <int> #> 1 Exercise 2 Solution rmd_heading  NA        <heading [h4]>    NA #> 2 Exercise 2 Solution rmd_markdown NA        <rmd_mrkd [2]>     2 #> 3 Exercise 2 Solution rmd_chunk    plot-dino <chunk [r]>        5 #> 4 Exercise 2 Solution rmd_markdown NA        <rmd_mrkd [2]>     2 #> 5 Exercise 2 Solution rmd_chunk    cor-dino  <chunk [r]>        2 tbl %>%   dplyr::filter(sec_h3 == \"Exercise 2\", sec_h4 == \"Solution\", type == \"rmd_chunk\") #> # A tibble: 2 × 5 #>   sec_h3     sec_h4   type      label     ast         #>   <chr>      <chr>    <chr>     <chr>     <rmd_ast>   #> 1 Exercise 2 Solution rmd_chunk plot-dino <chunk [r]> #> 2 Exercise 2 Solution rmd_chunk cor-dino  <chunk [r]> tbl %>%   dplyr::filter(sec_h3 == \"Exercise 2\", sec_h4 == \"Solution\", type == \"rmd_chunk\") %>%   as_document() %>%    cat(sep=\"\\n\") #> ```{r plot-dino, fig.height = 3, fig.width = 6} #> dino_data <- datasaurus_dozen %>% #>   filter(dataset == \"dino\") #>  #> ggplot(data = dino_data, mapping = aes(x = x, y = y)) + #>   geom_point() #> ``` #>  #> ```{r cor-dino} #> dino_data %>% #>   summarize(r = cor(x, y)) #> ``` tbl %>%   rmd_select(by_section(c(\"Exercise 2\", \"Solution\")) & has_type(\"rmd_chunk\")) %>%   as_document() %>%    cat(sep=\"\\n\") #> ```{r plot-dino, fig.height = 3, fig.width = 6} #> dino_data <- datasaurus_dozen %>% #>   filter(dataset == \"dino\") #>  #> ggplot(data = dino_data, mapping = aes(x = x, y = y)) + #>   geom_point() #> ``` #>  #> ```{r cor-dino} #> dino_data %>% #>   summarize(r = cor(x, y)) #> ```"},{"path":"https://rundel.github.io/parsermd/articles/templates.html","id":"example---hw01","dir":"Articles","previous_headings":"","what":"Example - hw01","title":"Rmd Templates","text":"Imagine homework assignment distributed students form Rmd document named hw01.Rmd. document describes necessary tasks student complete also includes scaffolding form Rmd chunks markdown indicates students expected include solutions. can see examples templating extracting contents markdown Exercise 1 > Solution section. student completes assignment want able check included solutions appropriate sections. minimum means need check sections still exist, secondarily might also want check provided content solution differs provided scaffolding.","code":"(rmd = parse_rmd(system.file(\"hw01.Rmd\", package = \"parsermd\"))) #> ├── YAML [2 lines] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 1 opt, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [2 lines] #> │   └── Heading [h4] - Solution #> │       └── Markdown [2 lines] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [2 lines] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [4 lines] #> │       ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> │       ├── Markdown [2 lines] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [2 lines] #>     └── Heading [h4] - Solution #>         ├── Markdown [4 lines] #>         ├── Chunk [r, 1 lines] - plot-star #>         ├── Markdown [2 lines] #>         └── Chunk [r, 1 lines] - cor-star rmd_select(rmd, by_section(c(\"Exercise 1\", \"Solution\")) & has_type(\"rmd_markdown\")) %>%   as_document() #> [1] \"(Type your answer to Exercise 1 here. This exercise does not require any R code.)\" #> [2] \"\"                                                                                  #> [3] \"\""},{"path":"https://rundel.github.io/parsermd/articles/templates.html","id":"constructing-a-template","dir":"Articles","previous_headings":"Example - hw01","what":"Constructing a template","title":"Rmd Templates","text":"begin subsetting original parsed document select elements contain student’s answers - assumes sections elements extraneous contain things like background, instructions, question text. use rmd_select select elements original document contained withing section matching “Exercise *” “Solution” cover answers three exercises. One limited set elements use rmd_template function generate template. included keep_content  = TRUE order keep scaffolded content answer compared student’s answers.","code":"(rmd_sols = rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\")))) #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [2 lines] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [4 lines] #> │       ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> │       ├── Markdown [2 lines] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Markdown [4 lines] #>         ├── Chunk [r, 1 lines] - plot-star #>         ├── Markdown [2 lines] #>         └── Chunk [r, 1 lines] - cor-star (rmd_tmpl = rmd_template(rmd_sols, keep_content = TRUE)) #> # A tibble: 9 × 5 #>   sec_h3     sec_h4   type         label     content                             #>   <chr>      <chr>    <chr>        <chr>     <chr>                               #> 1 Exercise 1 Solution rmd_markdown NA        \"(Type your answer to Exercise 1 h… #> 2 Exercise 2 Solution rmd_markdown NA        \"(The answers for this Exercise ar… #> 3 Exercise 2 Solution rmd_chunk    plot-dino \"dino_data <- datasaurus_dozen %>%… #> 4 Exercise 2 Solution rmd_markdown NA        \"And next calculate the correlatio… #> 5 Exercise 2 Solution rmd_chunk    cor-dino  \"dino_data %>%\\n  summarize(r = co… #> 6 Exercise 3 Solution rmd_markdown NA        \"(Add code and narrative as needed… #> 7 Exercise 3 Solution rmd_chunk    plot-star \"\"                                  #> 8 Exercise 3 Solution rmd_markdown NA        \"I'm some text, you should replace… #> 9 Exercise 3 Solution rmd_chunk    cor-star  \"\""},{"path":"https://rundel.github.io/parsermd/articles/templates.html","id":"using-a-template","dir":"Articles","previous_headings":"Example - hw01","what":"Using a template","title":"Rmd Templates","text":"One template constructed can compare new Rmd document via rmd_check_template function. Note can pass rmd_ast rmd_tibble object directly, path Rmd parsed compared. output can see several issues document submitted student, missing two expected markdown text entries Exercise 3 appears entered thing new chunks markdown Exercise 2.","code":"rmd_check_template(system.file(\"hw01-student.Rmd\", package = \"parsermd\"), rmd_tmpl) #> ✖ The following required elements were missing in the document: #>   • Section \"Exercise 3\" > \"Solution\" is missing required \"markdown text\". #>   • Section \"Exercise 3\" > \"Solution\" is missing required \"markdown text\". #> ✖ The following document elements were unmodified from the template: #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"plot-dino\" #>     which has not been modified. #>   • Section \"Exercise 2\" > \"Solution\" has \"markdown text\" which has not been #>     modified. #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"cor-dino\" #>     which has not been modified."},{"path":"https://rundel.github.io/parsermd/articles/templates.html","id":"revising-a-template","dir":"Articles","previous_headings":"Example - hw01","what":"Revising a template","title":"Rmd Templates","text":"Let assume original template bit strict, like revise feedback giving students. decide Exercise 3 markdown text actually necessary, can remove requirement filtering elements rmd_sols rmd_tmpl. (Generally, former suggested workflow always work, later approach likely somewhat fragile changes made template format future releases.) use rmd_select ! operator remove specific markdown elements. new AST can passed rmd_template rmd_check_template provide revised feedback,","code":"rmd_sols %>%   rmd_select( !(by_section(c(\"Exercise 3\", \"Solution\")) & has_type(\"rmd_markdown\")) ) #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [2 lines] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [4 lines] #> │       ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> │       ├── Markdown [2 lines] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Chunk [r, 1 lines] - plot-star #>         └── Chunk [r, 1 lines] - cor-star rmd_sols %>%   rmd_select( !(by_section(c(\"Exercise 3\", \"Solution\")) & has_type(\"rmd_markdown\")) ) %>%   rmd_template(keep_content = TRUE) %>%   rmd_check_template(system.file(\"hw01-student.Rmd\", package = \"parsermd\"), .) #> ✖ The following document elements were unmodified from the template: #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"plot-dino\" #>     which has not been modified. #>   • Section \"Exercise 2\" > \"Solution\" has \"markdown text\" which has not been #>     modified. #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"cor-dino\" #>     which has not been modified."},{"path":"https://rundel.github.io/parsermd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Colin Rundel. Author, maintainer.","code":""},{"path":"https://rundel.github.io/parsermd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rundel C (2024). parsermd: Formal Parser Related Tools R Markdown Documents. R package version 0.1.2.9000, https://github.com/rundel/parsermd, https://rundel.github.io/parsermd/.","code":"@Manual{,   title = {parsermd: Formal Parser and Related Tools for R Markdown Documents},   author = {Colin Rundel},   year = {2024},   note = {R package version 0.1.2.9000, https://github.com/rundel/parsermd},   url = {https://rundel.github.io/parsermd/}, }"},{"path":"https://rundel.github.io/parsermd/index.html","id":"parsermd","dir":"","previous_headings":"","what":"Formal Parser and Related Tools for R Markdown Documents","title":"Formal Parser and Related Tools for R Markdown Documents","text":"goal parsermd extract content R Markdown file allow programmatic interactions document’s contents (.e. code chunks markdown text). goal capture fundamental structure document attempt parse every detail Rmd. Specifically, yaml front matter, markdown text, R code read text lines allowing processed using tools.","code":""},{"path":"https://rundel.github.io/parsermd/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Formal Parser and Related Tools for R Markdown Documents","text":"parsermd can installed CRAN : can install latest development version parsermd GitHub :","code":"install.packages(\"parsermd\") remotes::install_github(\"rundel/parsermd\") library(parsermd)"},{"path":"https://rundel.github.io/parsermd/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Formal Parser and Related Tools for R Markdown Documents","text":"details see getting started vignette topic specific articles.","code":"(rmd = parsermd::parse_rmd(system.file(\"minimal.Rmd\", package = \"parsermd\"))) #> ├── YAML [4 lines] #> ├── Heading [h1] - Setup #> │   └── Chunk [r, 1 opt, 1 lines] - setup #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [6 lines] #>     │   ├── Chunk [r, 1 lines] - cars #>     │   └── Chunk [r, 1 lines] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [2 lines] #>         ├── Chunk [r, 1 opt, 1 lines] - pressure #>         └── Markdown [2 lines]  as_tibble(rmd) #> # A tibble: 12 × 5 #>    sec_h1  sec_h2          type          label           ast            #>    <chr>   <chr>           <chr>         <chr>           <rmd_ast>      #>  1 <NA>    <NA>            rmd_yaml_list <NA>            <yaml>         #>  2 Setup   <NA>            rmd_heading   <NA>            <heading [h1]> #>  3 Setup   <NA>            rmd_chunk     setup           <chunk [r]>    #>  4 Content <NA>            rmd_heading   <NA>            <heading [h1]> #>  5 Content R Markdown      rmd_heading   <NA>            <heading [h2]> #>  6 Content R Markdown      rmd_markdown  <NA>            <rmd_mrkd [6]> #>  7 Content R Markdown      rmd_chunk     cars            <chunk [r]>    #>  8 Content R Markdown      rmd_chunk     unnamed-chunk-1 <chunk [r]>    #>  9 Content Including Plots rmd_heading   <NA>            <heading [h2]> #> 10 Content Including Plots rmd_markdown  <NA>            <rmd_mrkd [2]> #> 11 Content Including Plots rmd_chunk     pressure        <chunk [r]>    #> 12 Content Including Plots rmd_markdown  <NA>            <rmd_mrkd [2]>  rmd_select(rmd, by_section(\"Content\")) #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [6 lines] #>     │   ├── Chunk [r, 1 lines] - cars #>     │   └── Chunk [r, 1 lines] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [2 lines] #>         ├── Chunk [r, 1 opt, 1 lines] - pressure #>         └── Markdown [2 lines]  rmd_select(rmd, by_section(c(\"Content\", \"*\"))) %>%   rmd_select(has_type(c(\"rmd_chunk\", \"rmd_heading\"))) #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Chunk [r, 1 lines] - cars #>     │   └── Chunk [r, 1 lines] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         └── Chunk [r, 1 opt, 1 lines] - pressure  rmd_select(rmd, \"pressure\") #> └── Chunk [r, 1 opt, 1 lines] - pressure  rmd_select(rmd, 1:3) #> ├── YAML [4 lines] #> └── Heading [h1] - Setup #>     └── Chunk [r, 1 opt, 1 lines] - setup"},{"path":"https://rundel.github.io/parsermd/reference/as_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into an rmd_ast. — as_ast","title":"Convert an object into an rmd_ast. — as_ast","text":"Currently supports conversion rmd_tibble objects back rmd_ast.","code":""},{"path":"https://rundel.github.io/parsermd/reference/as_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into an rmd_ast. — as_ast","text":"","code":"as_ast(x, ...)"},{"path":"https://rundel.github.io/parsermd/reference/as_ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into an rmd_ast. — as_ast","text":"x Object convert ... Unused, extensibility.","code":""},{"path":"https://rundel.github.io/parsermd/reference/as_ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into an rmd_ast. — as_ast","text":"Returns rmd_ast object.","code":""},{"path":"https://rundel.github.io/parsermd/reference/as_ast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object into an rmd_ast. — as_ast","text":"","code":"parse_rmd(system.file(\"hw01.Rmd\", package=\"parsermd\")) %>%   as_tibble() %>%   as_ast() #> ├── YAML [2 lines] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 1 opt, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [2 lines] #> │   └── Heading [h4] - Solution #> │       └── Markdown [2 lines] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [2 lines] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [4 lines] #> │       ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> │       ├── Markdown [2 lines] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [2 lines] #>     └── Heading [h4] - Solution #>         ├── Markdown [4 lines] #>         ├── Chunk [r, 1 lines] - plot-star #>         ├── Markdown [2 lines] #>         └── Chunk [r, 1 lines] - cor-star"},{"path":"https://rundel.github.io/parsermd/reference/as_document.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an rmd_ast, rmd_tibble, or any ast node into text. — as_document","title":"Convert an rmd_ast, rmd_tibble, or any ast node into text. — as_document","text":"Convert rmd_ast, rmd_tibble, ast node text.","code":""},{"path":"https://rundel.github.io/parsermd/reference/as_document.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an rmd_ast, rmd_tibble, or any ast node into text. — as_document","text":"","code":"as_document(x, padding = \"\", collapse = NULL, ...)"},{"path":"https://rundel.github.io/parsermd/reference/as_document.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an rmd_ast, rmd_tibble, or any ast node into text. — as_document","text":"x rmd_ast, rmd_tibble, parsermd node object. padding Padding add nodes assembling text. collapse NULL, use value collapse lines. ... Unused, extensibility.","code":""},{"path":"https://rundel.github.io/parsermd/reference/as_document.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an rmd_ast, rmd_tibble, or any ast node into text. — as_document","text":"Returns character vector.","code":""},{"path":"https://rundel.github.io/parsermd/reference/chunk_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set code chunk options — chunk_options","title":"Get and set code chunk options — chunk_options","text":"Helper functions obtaining changing chunk options within rmd object.","code":""},{"path":"https://rundel.github.io/parsermd/reference/chunk_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set code chunk options — chunk_options","text":"","code":"rmd_set_options(x, ...)  rmd_get_options(x, ..., defaults = list())"},{"path":"https://rundel.github.io/parsermd/reference/chunk_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set code chunk options — chunk_options","text":"x rmd_ast, rmd_tibble, rmd ast node object. ... Either collection named values setter character values option names getter. defaults named list default values options.","code":""},{"path":"https://rundel.github.io/parsermd/reference/chunk_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set code chunk options — chunk_options","text":"rmd_set_options returns modified version original object. rmd_get_options returns list requested options (options none specified). Non-chunk nodes return NULL.","code":""},{"path":"https://rundel.github.io/parsermd/reference/chunk_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set code chunk options — chunk_options","text":"","code":"rmd = parse_rmd(system.file(\"minimal.Rmd\", package = \"parsermd\"))  str(rmd_get_options(rmd)) #> List of 12 #>  $ : NULL #>  $ : NULL #>  $ :List of 1 #>   ..$ include: chr \"FALSE\" #>  $ : NULL #>  $ : NULL #>  $ : NULL #>  $ : Named list() #>  $ : Named list() #>  $ : NULL #>  $ : NULL #>  $ :List of 1 #>   ..$ echo: chr \"FALSE\" #>  $ : NULL str(rmd_get_options(rmd), \"include\") #> List of 12 #>  $ : NULL #>  $ : NULL #>  $ :List of 1 #>   ..$ include: chr \"FALSE\" #>  $ : NULL #>  $ : NULL #>  $ : NULL #>  $ : Named list() #>  $ : Named list() #>  $ : NULL #>  $ : NULL #>  $ :List of 1 #>   ..$ echo: chr \"FALSE\" #>  $ : NULL  rmd_set_options(rmd, include = TRUE) #> ├── YAML [4 lines] #> ├── Heading [h1] - Setup #> │   └── Chunk [r, 1 opt, 1 lines] - setup #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [6 lines] #>     │   ├── Chunk [r, 1 opt, 1 lines] - cars #>     │   └── Chunk [r, 1 opt, 1 lines] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [2 lines] #>         ├── Chunk [r, 2 opts, 1 lines] - pressure #>         └── Markdown [2 lines]"},{"path":"https://rundel.github.io/parsermd/reference/parse_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse an R Markdown document — parse_rmd","title":"Parse an R Markdown document — parse_rmd","text":"Documents parse rmd_ast object.","code":""},{"path":"https://rundel.github.io/parsermd/reference/parse_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse an R Markdown document — parse_rmd","text":"","code":"parse_rmd(rmd, allow_incomplete = FALSE, parse_yaml = TRUE)"},{"path":"https://rundel.github.io/parsermd/reference/parse_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse an R Markdown document — parse_rmd","text":"rmd Either path Rmd file character vector containing contents R Markdown document. allow_incomplete Allow incomplete parsing document. parse_yaml Use yaml package parse document's yaml.","code":""},{"path":"https://rundel.github.io/parsermd/reference/parse_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse an R Markdown document — parse_rmd","text":"Returns rmd_ast object.","code":""},{"path":"https://rundel.github.io/parsermd/reference/parse_rmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse an R Markdown document — parse_rmd","text":"","code":"parse_rmd(system.file(\"hw01.Rmd\", package=\"parsermd\")) #> ├── YAML [2 lines] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 1 opt, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [2 lines] #> │   └── Heading [h4] - Solution #> │       └── Markdown [2 lines] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [2 lines] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [4 lines] #> │       ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> │       ├── Markdown [2 lines] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [2 lines] #>     └── Heading [h4] - Solution #>         ├── Markdown [4 lines] #>         ├── Chunk [r, 1 lines] - plot-star #>         ├── Markdown [2 lines] #>         └── Chunk [r, 1 lines] - cor-star"},{"path":"https://rundel.github.io/parsermd/reference/parsermd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"parsermd: Formal Parser and Related Tools for R Markdown Documents — parsermd-package","title":"parsermd: Formal Parser and Related Tools for R Markdown Documents — parsermd-package","text":"implementation formal grammar parser R Markdown documents using Boost Spirit X3 library. also includes collection high level functions working resulting abstract syntax tree.","code":""},{"path":[]},{"path":"https://rundel.github.io/parsermd/reference/parsermd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"parsermd: Formal Parser and Related Tools for R Markdown Documents — parsermd-package","text":"Maintainer: Colin Rundel rundel@gmail.com","code":""},{"path":"https://rundel.github.io/parsermd/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>% pillar type_sum tibble as_tibble","code":""},{"path":"https://rundel.github.io/parsermd/reference/render.html","id":null,"dir":"Reference","previous_headings":"","what":"Render parsermd objects using rmarkdown::render() — render","title":"Render parsermd objects using rmarkdown::render() — render","text":"Object contents converted character vector written temporary directory rendering. Note function potential overwrite existing output files (e.g. .html, .pdf, etc).","code":""},{"path":"https://rundel.github.io/parsermd/reference/render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render parsermd objects using rmarkdown::render() — render","text":"","code":"render(x, name = NULL, ...)"},{"path":"https://rundel.github.io/parsermd/reference/render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render parsermd objects using rmarkdown::render() — render","text":"x Object render, e.g. rmd_ast, rmd_tibble, character vector, etc. name Name output file, given inferred name x. ... additional arguments passed rmarkdown::render()","code":""},{"path":"https://rundel.github.io/parsermd/reference/render.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render parsermd objects using rmarkdown::render() — render","text":"Returns results rmarkdown::render().","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_check_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Check an Rmd against a template — rmd_check_template","title":"Check an Rmd against a template — rmd_check_template","text":"function compares provided Rmd template reports discrepancies (e.g. missing unmodified components).","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_check_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check an Rmd against a template — rmd_check_template","text":"","code":"rmd_check_template(rmd, template, ...)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_check_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check an Rmd against a template — rmd_check_template","text":"rmd rmd check, can rmd_ast, rmd_tibble, text can handled parse_rmd. template rmd_template object rmd_template(). ... Unused, extensibility.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_check_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check an Rmd against a template — rmd_check_template","text":"Invisibly returns TRUE rmd matches template, FALSE otherwise.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_check_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check an Rmd against a template — rmd_check_template","text":"","code":"tmpl = parse_rmd(system.file(\"hw01.Rmd\", package = \"parsermd\")) %>%   rmd_select(by_section(c(\"Exercise *\", \"Solution\"))) %>%   rmd_template(keep_content = TRUE)  rmd_check_template(   system.file(\"hw01-student.Rmd\", package = \"parsermd\"),   tmpl ) #> ✖ The following required elements were missing in the document: #>   • Section \"Exercise 3\" > \"Solution\" is missing required \"markdown text\". #>   • Section \"Exercise 3\" > \"Solution\" is missing required \"markdown text\". #>  #> ✖ The following document elements were unmodified from the template: #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"plot-dino\" #>     which has not been modified. #>   • Section \"Exercise 2\" > \"Solution\" has \"markdown text\" which has not been #>     modified. #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"cor-dino\" #>     which has not been modified."},{"path":"https://rundel.github.io/parsermd/reference/rmd_node.html","id":null,"dir":"Reference","previous_headings":"","what":"rmd node utility functions — rmd_node","title":"rmd node utility functions — rmd_node","text":"Functions extracting information Rmd nodes.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rmd node utility functions — rmd_node","text":"","code":"rmd_node_label(x, ...)  rmd_node_type(x, ...)  rmd_node_length(x, ...)  rmd_node_content(x, ...)  rmd_node_attr(x, attr, ...)  rmd_node_engine(x, ...)  rmd_node_options(x, ...)  rmd_node_code(x, ...)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rmd node utility functions — rmd_node","text":"x rmd object, e.g. rmd_ast rmd_tibble. ... Unused, extensibility. attr Attribute name extract.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rmd node utility functions — rmd_node","text":"rmd_node_label() - returns character vector node labels, nodes without labels return NA. rmd_node_type() - returns character vector node types. rmd_node_length() - returns integer vector node lengths (.e. lines code, lines text, etc.), nodes without length return NA. rmd_node_content() - returns character vector node textual content, nodes without content return NA. rmd_node_attr() - returns list node attribute values. rmd_node_engine() - returns character vector chunk engines, NA node types. rmd_node_options() - returns list chunk node options (named list), MULL node types. rmd_node_code() - returns list chunk node code (character vector), NULL node types.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rmd node utility functions — rmd_node","text":"","code":"rmd = parse_rmd(system.file(\"hw01.Rmd\", package=\"parsermd\"))  rmd_node_label(rmd) #>  [1] NA              NA              \"load-packages\" NA              #>  [5] NA              NA              NA              NA              #>  [9] NA              NA              NA              \"plot-dino\"     #> [13] NA              \"cor-dino\"      NA              NA              #> [17] NA              NA              \"plot-star\"     NA              #> [21] \"cor-star\"      rmd_node_type(rmd) #>  [1] \"rmd_yaml_list\" \"rmd_heading\"   \"rmd_chunk\"     \"rmd_heading\"   #>  [5] \"rmd_markdown\"  \"rmd_heading\"   \"rmd_markdown\"  \"rmd_heading\"   #>  [9] \"rmd_markdown\"  \"rmd_heading\"   \"rmd_markdown\"  \"rmd_chunk\"     #> [13] \"rmd_markdown\"  \"rmd_chunk\"     \"rmd_heading\"   \"rmd_markdown\"  #> [17] \"rmd_heading\"   \"rmd_markdown\"  \"rmd_chunk\"     \"rmd_markdown\"  #> [21] \"rmd_chunk\"     rmd_node_content(rmdlibrary(tidyverse) \\nlibrary(datasauRusased on the help file, how many rows and how many columns does the `datasaurus_dozen` file have? What are the variables included in the data frame? Add your responses to your lab report. When you're done, commit your changes with the commit message \\\"Added answer for Ex 1\\\", and push.\\n\" #>  [6] NA                                                                                                                                                                                                                                                                                                 #>  [7] \"(Type your answer to Exercise 1 here. This exercise does not require any R code.)\\nlot `y` vs. `x` for the `dino` dataset. Then, calculate the correlation coefficient between x and y for this dataset.\\n\"                                                                                                                                                                         #> [10] NA                                                                                                                                                                                                                                                                                                 #> [11] \"(The answers for this Exercise are given for you below. But you should clean up some of the narrative so that it only includes what you want to turn in.)\\n\\nFirst let's plot the data in the dino dataset:\\n\"                                                                                    #> [12] \"dino_data <- datasaurus_dozen %>%\\n  filter(dataset == \\\"dino\\\")\\n\\nggplot(data = dino_data, mapping = aes(x = x, y = y)) +\\n  geom_point()\"                                                                                                                                                      #> [13] \"And next calculate the correlation between `x` and `y` in this dataset:\\n\"                                                                                                                                                                                                                        #> [14] \"dino_data %>%\\n  summarize(r = cor(x, ylot `y` vs. `x` for the `star` dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?\\n\"              #> [17] NA                                                                                                                                                                                                                                                                                                 #> [18] \"(Add code and narrative as needed. Note that the R chunks are labeled with `plot-star` and `cor-star` to provide spaces to place the code for plotting and calculating the correlation coefficient. To finish, clean up the narrative by removing these instructions.)\\n\\nBlah blah blah...\\n\"    #> [19] \"\"                                                                                                                                                                                                                                                                                                 #> [20] \"I'm some text, you should replace me with more meaningful text...\\nrmd_node_attr(rmd, \"level\") #> [[1]] #> NULL #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> NULL #>  #> [[4]] #> [1] 3 #>  #> [[5]] #> NULL #>  #> [[6]] #> [1] 4 #>  #> [[7]] #> NULL #>  #> [[8]] #> [1] 3 #>  #> [[9]] #> NULL #>  #> [[10]] #> [1] 4 #>  #> [[11]] #> NULL #>  #> [[12]] #> NULL #>  #> [[13]] #> NULL #>  #> [[14]] #> NULL #>  #> [[15]] #> [1] 3 #>  #> [[16]] #> NULL #>  #> [[17]] #> [1] 4 #>  #> [[18]] #> NULL #>  #> [[19]] #> NULL #>  #> [[20]] #> NULL #>  #> [[21]] #> NULL #>  rmd_node_engine(rmd) #>  [1] NA  NA  \"r\" NA  NA  NA  NA  NA  NA  NA  NA  \"r\" NA  \"r\" NA  NA  NA  NA  \"r\" #> [20] NA  \"r\" rmd_node_options(rmd) #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> [[3]]$message #> [1] \"FALSE\" #>  #>  #> [[4]] #> NULL #>  #> [[5]] #> NULL #>  #> [[6]] #> NULL #>  #> [[7]] #> NULL #>  #> [[8]] #> NULL #>  #> [[9]] #> NULL #>  #> [[10]] #> NULL #>  #> [[11]] #> NULL #>  #> [[12]] #> [[12]]$fig.height #> [1] \"3\" #>  #> [[12]]$fig.width #> [1] \"6\" #>  #>  #> [[13]] #> NULL #>  #> [[14]] #> named list() #>  #> [[15]] #> NULL #>  #> [[16]] #> NULL #>  #> [[17]] #> NULL #>  #> [[18]] #> NULL #>  #> [[19]] #> named list() #>  #> [[20]] #> NULL #>  #> [[21]] #> named list() #>  rmd_node_code(rmd) #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> [1] \"library(tidyverse) \" \"library(datasauRus)\" #>  #> [[4]] #> NULL #>  #> [[5]] #> NULL #>  #> [[6]] #> NULL #>  #> [[7]] #> NULL #>  #> [[8]] #> NULL #>  #> [[9]] #> NULL #>  #> [[10]] #> NULL #>  #> [[11]] #> NULL #>  #> [[12]] #> [1] \"dino_data <- datasaurus_dozen %>%\"                       #> [2] \"  filter(dataset == \\\"dino\\\")\"                           #> [3] \"\"                                                        #> [4] \"ggplot(data = dino_data, mapping = aes(x = x, y = y)) +\" #> [5] \"  geom_point()\"                                          #>  #> [[13]] #> NULL #>  #> [[14]] #> [1] \"dino_data %>%\"              \"  summarize(r = cor(x, y))\" #>  #> [[15]] #> NULL #>  #> [[16]] #> NULL #>  #> [[17]] #> NULL #>  #> [[18]] #> NULL #>  #> [[19]] #> [1] \"\" #>  #> [[20]] #> NULL #>  #> [[21]] #> [1] \"\" #>"},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_sections.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the sections for each rmd object node — rmd_node_sections","title":"Find the sections for each rmd object node — rmd_node_sections","text":"Uses section headings rmd object identify hierarchical structure document.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_sections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the sections for each rmd object node — rmd_node_sections","text":"","code":"rmd_node_sections(x, levels = 1:6, drop_na = FALSE)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_sections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the sections for each rmd object node — rmd_node_sections","text":"x rmd object, e.g. rmd_ast rmd_tibble. levels Limit section heading levels return. drop_na NA sections dropped.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_sections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the sections for each rmd object node — rmd_node_sections","text":"list section names node.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select nodes of an Rmd ast — rmd_select","title":"Select nodes of an Rmd ast — rmd_select","text":"function implemented using tidyselect::eval_select() enables variety useful syntax selecting nodes ast. Additionally, number additional parsermd specific selection helpers available: by_section(), has_type(), has_label(), has_option().","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select nodes of an Rmd ast — rmd_select","text":"","code":"rmd_select(x, ...)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select nodes of an Rmd ast — rmd_select","text":"x Rmd object, e.g. rmd_ast rmd_tibble. ... One unquoted expressions separated commas. Chunk labels can used positions data frame, expressions like x:y can used select range nodes.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select nodes of an Rmd ast — rmd_select","text":"Returns subset Rmd object (either rmd_ast rmd_tibble depending input).","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select nodes of an Rmd ast — rmd_select","text":"","code":"rmd = parse_rmd(system.file(\"hw01.Rmd\", package = \"parsermd\"))  rmd_select(rmd, \"plot-dino\", \"cor-dino\") #> ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> └── Chunk [r, 2 lines] - cor-dino rmd_select(rmd, \"plot-dino\":\"cor-dino\") #> ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> ├── Markdown [2 lines] #> └── Chunk [r, 2 lines] - cor-dino rmd_select(rmd, `plot-dino`:`cor-dino`) #> ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> ├── Markdown [2 lines] #> └── Chunk [r, 2 lines] - cor-dino  rmd_select(rmd, has_type(\"rmd_chunk\")) #> ├── Chunk [r, 1 opt, 2 lines] - load-packages #> ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> ├── Chunk [r, 2 lines] - cor-dino #> ├── Chunk [r, 1 lines] - plot-star #> └── Chunk [r, 1 lines] - cor-star  rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\"))) #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [2 lines] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [4 lines] #> │       ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> │       ├── Markdown [2 lines] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Markdown [4 lines] #>         ├── Chunk [r, 1 lines] - plot-star #>         ├── Markdown [2 lines] #>         └── Chunk [r, 1 lines] - cor-star"},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Rmd selection helper functions — rmd_select_helpers","title":"Rmd selection helper functions — rmd_select_helpers","text":"functions used conjunction rmd_select() select nodes Rmd ast. by_section() - uses section selectors select nodes. has_type() - selects nodes given type(s). has_label() - selects nodes labels matching given glob. has_option() - selects nodes given option(s) set.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rmd selection helper functions — rmd_select_helpers","text":"","code":"has_type(types)  by_section(sec_ref, keep_parents = TRUE)  has_label(label)  has_option(...)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rmd selection helper functions — rmd_select_helpers","text":"types Vector character type names, e.g. rmd_chunk, rmd_heading, etc. sec_ref character vector, section reference selector. See details details constructed. keep_parents Logical, retain parent headings selected sections. Default: TRUE label character vector, glob patterns matching chunk labels. ... Either option names represented scalar string named argument form opt = value opt option name value value checked. example eval = TRUE check option eval set TRUE.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rmd selection helper functions — rmd_select_helpers","text":"helper functions return integer vector selected indexes.","code":""},{"path":[]},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":"section-reference-selectors","dir":"Reference","previous_headings":"","what":"Section reference selectors","title":"Rmd selection helper functions — rmd_select_helpers","text":"Section reference selectors simplified version CSS selectors designed enable selection nodes way respects implied hierarchy document's section headings. consist character vector heading names subsequent value assumed nested within preceding value. example, section selector c(\"Sec 1\", \"Sec 2\") select nodes contained within section named Sec 2 turn contained within section named Sec 1 (section contained within section named Sec 1, ). individual section names can specified using wildcards (aka globbing patterns), may match one sections within document, e.g. c(\"Sec 1\", \"Sec *\"). See utils::glob2rx() wikipedia details syntax patterns.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rmd selection helper functions — rmd_select_helpers","text":"","code":"rmd = parse_rmd(system.file(\"hw01.Rmd\", package=\"parsermd\"))  rmd_select(rmd, has_type(\"rmd_chunk\")) #> ├── Chunk [r, 1 opt, 2 lines] - load-packages #> ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> ├── Chunk [r, 2 lines] - cor-dino #> ├── Chunk [r, 1 lines] - plot-star #> └── Chunk [r, 1 lines] - cor-star  rmd_select(rmd, has_label(\"*dino\")) #> ├── Chunk [r, 2 opts, 5 lines] - plot-dino #> └── Chunk [r, 2 lines] - cor-dino  rmd_select(rmd, has_option(\"message\")) #> └── Chunk [r, 1 opt, 2 lines] - load-packages rmd_select(rmd, has_option(message = FALSE)) #> └── Chunk [r, 1 opt, 2 lines] - load-packages rmd_select(rmd, has_option(message = TRUE))"},{"path":"https://rundel.github.io/parsermd/reference/rmd_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Source the code chunks of an Rmd document — rmd_source","title":"Source the code chunks of an Rmd document — rmd_source","text":"equivalent source() function Rmd files resulting asts.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source the code chunks of an Rmd document — rmd_source","text":"","code":"rmd_source(x, local = FALSE, ..., label_comment = TRUE, use_eval = TRUE)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source the code chunks of an Rmd document — rmd_source","text":"x Rmd document (e.g. rmd_ast, rmd_tibble, Rmd file path, etc.) local TRUE, FALSE environment, determining parsed expressions evaluated. FALSE (default) corresponds user's workspace (global environment) TRUE environment source called. ... Additional arguments passed source. label_comment Attach chunk labels comment code block. use_eval Use eval chunk option determine code included.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source the code chunks of an Rmd document — rmd_source","text":"Returns result source() R code chunks.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source the code chunks of an Rmd document — rmd_source","text":"","code":"rmd_source(system.file(\"minimal.Rmd\", package = \"parsermd\"), echo=TRUE) #> > knitr::opts_chunk$set(echo = TRUE) #> > summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00   #> > knitr::knit_patterns$get() #> $chunk.begin #> NULL #>  #> $chunk.end #> NULL #>  #> $chunk.code #> NULL #>  #> $inline.code #> NULL #>  #> $global.options #> NULL #>  #> $input.doc #> NULL #>  #> $ref.chunk #> NULL #>  #> $header.begin #> NULL #>  #> $document.begin #> NULL #>  #> > plot(pressure)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset the nodes of an rmd object — rmd_subset","title":"Subset the nodes of an rmd object — rmd_subset","text":"Subset rmd object based sections, node types, names.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset the nodes of an rmd object — rmd_subset","text":"","code":"rmd_subset(   x,   sec_refs = NULL,   type_refs = NULL,   name_refs = NULL,   exclude = FALSE,   keep_yaml = TRUE,   keep_setup = FALSE,   ... )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset the nodes of an rmd object — rmd_subset","text":"x rmd object, e.g. rmd_ast rmd_tibble. sec_refs Section references, TODO - add details. type_refs Node type references, TODO - add details. name_refs Name references, TODO - add details. exclude matching nodes excluded. keep_yaml document yaml kept. keep_setup document setup chunk kept. ... Unused, extensibility.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset the nodes of an rmd object — rmd_subset","text":"Returns subset Rmd object (either rmd_ast rmd_tibble depending input).","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_subset_util.html","id":null,"dir":"Reference","previous_headings":"","what":"rmd_subset utility functions — rmd_subset_util","title":"rmd_subset utility functions — rmd_subset_util","text":"Tools selecting checking single node using rmd_subset() selection.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_subset_util.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rmd_subset utility functions — rmd_subset_util","text":"","code":"rmd_get_node(x, sec_refs = NULL, type_refs = NULL, name_refs = NULL, ...)  rmd_get_chunk(x, sec_refs = NULL, name_refs = NULL)  rmd_get_markdown(x, sec_refs = NULL)  rmd_has_node(x, sec_refs = NULL, type_refs = NULL, name_refs = NULL, ...)  rmd_has_chunk(x, sec_refs = NULL, name_refs = NULL, ...)  rmd_has_markdown(x, sec_refs = NULL, ...)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_subset_util.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rmd_subset utility functions — rmd_subset_util","text":"x rmd object, e.g. rmd_ast rmd_tibble. sec_refs Section references, TODO - add details. type_refs Node type references, TODO - add details. name_refs Name references, TODO - add details. ... Unused, extensibility.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_subset_util.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rmd_subset utility functions — rmd_subset_util","text":"rmd_get_*() functions returns single Rmd node object (e.g. rmd_heading, rmd_chunk, rmd_markdown, etc.) rmd_has_*() functions return TRUE matching node exists, FALSE otherwise.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a template from an rmd object. — rmd_template","title":"Create a template from an rmd object. — rmd_template","text":"Templates objects meant capture structure R Markdown document facilitate comparison template new Rmd documents, usually ensure structure /content matches sufficiently.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a template from an rmd object. — rmd_template","text":"","code":"rmd_template(   rmd,   keep_content = FALSE,   keep_labels = TRUE,   keep_headings = FALSE,   keep_yaml = FALSE,   ... )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a template from an rmd object. — rmd_template","text":"rmd R Markdown document form rmd_ast rmd_tibble. keep_content template keep document's content (markdown text chunk code). keep_labels template keep document's code chunk labels. keep_headings template keep document's headings. keep_yaml template keep document's yaml. ... Unused, extensibility.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a template from an rmd object. — rmd_template","text":"Returns rmd_template object, derived tibble containing relevant structural details document.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a template from an rmd object. — rmd_template","text":"","code":"rmd = parse_rmd(system.file(\"hw01.Rmd\", package=\"parsermd\"))  rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\"))) %>%   rmd_template() #> # A tibble: 9 × 4 #>   sec_h3     sec_h4   type         label     #>   <chr>      <chr>    <chr>        <chr>     #> 1 Exercise 1 Solution rmd_markdown NA        #> 2 Exercise 2 Solution rmd_markdown NA        #> 3 Exercise 2 Solution rmd_chunk    plot-dino #> 4 Exercise 2 Solution rmd_markdown NA        #> 5 Exercise 2 Solution rmd_chunk    cor-dino  #> 6 Exercise 3 Solution rmd_markdown NA        #> 7 Exercise 3 Solution rmd_chunk    plot-star #> 8 Exercise 3 Solution rmd_markdown NA        #> 9 Exercise 3 Solution rmd_chunk    cor-star"},{"path":[]},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-0129000","dir":"Changelog","previous_headings":"","what":"parsermd 0.1.2.9000","title":"parsermd 0.1.2.9000","text":"Unlabeled chunks now labeled unnamed-chunk-n, n incrementing.","code":""},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-012","dir":"Changelog","previous_headings":"","what":"parsermd 0.1.2","title":"parsermd 0.1.2","text":"CRAN release: 2021-05-20 Fix compilation issues older GCC versions (e.g. GCC@5 Solaris)","code":""},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-011","dir":"Changelog","previous_headings":"","what":"parsermd 0.1.1","title":"parsermd 0.1.1","text":"CRAN release: 2021-05-19 Fix issue Linux using LANG=en_US.iso88591 (LANG=en_US.iso88591 LC_ALL=en_US.iso88591 R CMD check)","code":""},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-010","dir":"Changelog","previous_headings":"","what":"parsermd 0.1.0","title":"parsermd 0.1.0","text":"CRAN release: 2021-05-10 Added new parser error reporting system Adopt testthat 3.0.0 testing Added new render function support rendering rmd_ast related objects Added rmd_get_options rmd_set_options Added support raw attribute chunks (#13) Added rmd_source support sourcing chunks directly environment. Added rmd_select uses tidyselect based syntax replacement rmd_subset. Soft deprecated rmd_subset, rmd_get_node, rmd_get_markdwon, rmd_get_chunk.","code":""},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-001","dir":"Changelog","previous_headings":"","what":"parsermd 0.0.1","title":"parsermd 0.0.1","text":"Added NEWS.md file track changes package. Incremented version number. Overhauled ast tibble representations make compatible possible. Starting add helper functions: rmd_subset, rmd_has_node, rmd_get_node, etc. Initial implementation Rmd templates","code":""}]
