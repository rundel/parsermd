[{"path":"https://rundel.github.io/parsermd/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Colin Rundel Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rundel.github.io/parsermd/articles/assignment-with-key.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example - Assignment with Key","text":"common workflow educational settings involves creating homework assignments contain student scaffolding instructor solutions within document. vignette demonstrates use parsermd process documents automatically generate separate versions students instructors. typical workflow involves: Primary Document: single Qmd/Rmd file containing student prompts complete solutions Student Version: Contains student chunks scaffolding instructions Instructor Key: Contains solution chunks complete answers Minimalist Key: streamlined version solutions (instructional text)","code":""},{"path":"https://rundel.github.io/parsermd/articles/assignment-with-key.html","id":"sample-assignment-structure","dir":"Articles","previous_headings":"","what":"Sample Assignment Structure","title":"Example - Assignment with Key","text":"Let’s start examining sample homework assignment follows pattern. assignment includes multiple exercises, two code chunks: Student chunk: labeled -student suffix, contains scaffolding code Solution chunk: labeled -key suffix, contains complete solutions","code":"# Load the sample assignment assignment_path = system.file(\"examples/hw03-full.qmd\", package = \"parsermd\") cat(readLines(assignment_path), sep = \"\\n\") #> --- #> title: \"Homework 3 - Data Analysis with R\" #> author: \"Your Name\" #> date: \"Due: Friday, March 15, 2024\" #> format: html #> execute: #>   warning: false #>   message: false #> --- #> #> ## Setup #> #> Load the required packages for this assignment: #> #> ```{r setup} #> library(tidyverse) #> library(palmerpenguins) #> ``` #> #> ## Exercise 1: Basic Data Exploration #> #> Examine the `penguins` dataset from the `palmerpenguins` package. Your task is to create a summary of the dataset that shows the number of observations and variables, and identify any missing values. #> #> ```{r ex1-student} #> # Write your code here to: #> # 1. Display the dimensions of the penguins dataset #> # 2. Show the structure of the dataset #> # 3. Count missing values in each column #> #> ``` #> #> ```{r ex1-key} #> # Solution: Basic data exploration #> # 1. Display dimensions #> cat(\"Dataset dimensions:\", dim(penguins), \"\\n\") #> cat(\"Rows:\", nrow(penguins), \"Columns:\", ncol(penguins), \"\\n\\n\") #> #> # 2. Show structure #> str(penguins) #> #> # 3. Count missing values #> cat(\"\\nMissing values by column:\\n\") #> penguins %>% #>   summarise(across(everything(), ~ sum(is.na(.)))) #> ``` #> #> ## Exercise 2: Data Visualization #> #> Create a scatter plot showing the relationship between flipper length and body mass for penguins. Color the points by species and add appropriate labels and a title. #> #> ```{r ex2-student} #> # Create a scatter plot with: #> # - x-axis: flipper_length_mm #> # - y-axis: body_mass_g #> # - color by species #> # - add appropriate labels and title #> #> ggplot(data = penguins, aes(x = ___, y = ___)) + #>   geom_point(aes(color = ___)) + #>   labs( #>     title = \"___\", #>     x = \"___\", #>     y = \"___\" #>   ) #> ``` #> #> ```{r ex2-key} #> # Solution: Scatter plot of flipper length vs body mass #> ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) + #>   geom_point(aes(color = species), alpha = 0.8, size = 2) + #>   labs( #>     title = \"Penguin Flipper Length vs Body Mass by Species\", #>     x = \"Flipper Length (mm)\", #>     y = \"Body Mass (g)\", #>     color = \"Species\" #>   ) + #>   theme_minimal() + #>   scale_color_viridis_d() #> ``` #> #> ## Exercise 3: Statistical Analysis #> #> Calculate summary statistics for bill length by species. Create a table showing the mean, median, standard deviation, and count for each species. #> #> ```{r ex3-student} #> # Calculate summary statistics for bill_length_mm by species #> # Include: mean, median, standard deviation, and count #> # Remove missing values before calculating #> #> penguins %>% #>   # Add your code here #> #> ``` #> #> ```{r ex3-key} #> # Solution: Summary statistics for bill length by species #> penguins %>% #>   filter(!is.na(bill_length_mm)) %>% #>   group_by(species) %>% #>   summarise( #>     count = n(), #>     mean_bill_length = round(mean(bill_length_mm), 2), #>     median_bill_length = round(median(bill_length_mm), 2), #>     sd_bill_length = round(sd(bill_length_mm), 2), #>     .groups = \"drop\" #>   ) %>% #>   arrange(desc(mean_bill_length)) #> ``` #> #> ## Exercise 4: Advanced Data Manipulation #> #> Filter the dataset to include only penguins with complete data (no missing values), then create a new variable called `bill_ratio` that represents the ratio of bill length to bill depth. Finally, identify which species has the highest average bill ratio. #> #> ```{r ex4-student} #> # Step 1: Filter for complete cases #> # Step 2: Create bill_ratio variable (bill_length_mm / bill_depth_mm) #> # Step 3: Calculate average bill_ratio by species #> # Step 4: Identify species with highest average ratio #> #> ``` #> #> ```{r ex4-key} #> # Solution: Advanced data manipulation #> complete_penguins = penguins %>% #>   # Remove rows with any missing values #>   filter(complete.cases(.)) %>% #>   # Create bill_ratio variable #>   mutate(bill_ratio = bill_length_mm / bill_depth_mm) #> #> # Calculate average bill ratio by species #> bill_ratio_summary = complete_penguins %>% #>   group_by(species) %>% #>   summarise( #>     avg_bill_ratio = round(mean(bill_ratio), 3), #>     n = n(), #>     .groups = \"drop\" #>   ) %>% #>   arrange(desc(avg_bill_ratio)) #> #> print(bill_ratio_summary) #> #> # Identify species with highest average bill ratio #> highest_ratio_species = bill_ratio_summary %>% #>   slice_max(avg_bill_ratio, n = 1) %>% #>   pull(species) #> #> cat(\"\\nSpecies with highest average bill ratio:\", as.character(highest_ratio_species)) #> ``` #> #> ## Bonus Exercise: Conditional Logic #> #> Write a function that categorizes penguins as \"small\", \"medium\", or \"large\" based on their body mass. Use the following criteria: #> - Small: body mass < 3500g #> - Medium: body mass between 3500g and 4500g #> - Large: body mass > 4500g #> #> Apply this function to create a new column and create a summary table. #> #> ```{r bonus-student} #> # Create a function to categorize penguins by size #> categorize_size = function(mass) { #>   # Add your conditional logic here #> #> } #> #> # Apply the function and create summary #> ``` #> #> ```{r bonus-key} #> # Solution: Conditional logic for size categorization #> categorize_size = function(mass) { #>   case_when( #>     is.na(mass) ~ \"Unknown\", #>     mass < 3500 ~ \"Small\", #>     mass >= 3500 & mass <= 4500 ~ \"Medium\", #>     mass > 4500 ~ \"Large\" #>   ) #> } #> #> # Apply the function and create summary #> penguins_with_size = penguins %>% #>   mutate(size_category = categorize_size(body_mass_g)) #> #> # Create summary table #> size_summary = penguins_with_size %>% #>   count(species, size_category) %>% #>   pivot_wider(names_from = size_category, values_from = n, values_fill = 0) #> #> print(size_summary) #> #> # Overall size distribution #> penguins_with_size %>% #>   count(size_category) %>% #>   mutate(percentage = round(n / sum(n) * 100, 1)) #> ```"},{"path":"https://rundel.github.io/parsermd/articles/assignment-with-key.html","id":"parsing-the-document","dir":"Articles","previous_headings":"","what":"Parsing the Document","title":"Example - Assignment with Key","text":"First, let’s parse assignment document understand structure: can also examine document tibble better understand chunk labels structure:","code":"# Parse the assignment rmd = parse_rmd(assignment_path)  # Display the document structure print(rmd) #> ├── YAML [5 fields] #> ├── Heading [h2] - Setup #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 2 lines] - setup #> ├── Heading [h2] - Exercise 1: Basic Data Exploration #> │   ├── Markdown [1 line] #> │   ├── Chunk [r, 5 lines] - ex1-student #> │   └── Chunk [r, 12 lines] - ex1-key #> ├── Heading [h2] - Exercise 2: Data Visualization #> │   ├── Markdown [1 line] #> │   ├── Chunk [r, 13 lines] - ex2-student #> │   └── Chunk [r, 11 lines] - ex2-key #> ├── Heading [h2] - Exercise 3: Statistical Analysis #> │   ├── Markdown [1 line] #> │   ├── Chunk [r, 7 lines] - ex3-student #> │   └── Chunk [r, 12 lines] - ex3-key #> ├── Heading [h2] - Exercise 4: Advanced Data Manipulation #> │   ├── Markdown [1 line] #> │   ├── Chunk [r, 5 lines] - ex4-student #> │   └── Chunk [r, 25 lines] - ex4-key #> └── Heading [h2] - Bonus Exercise: Conditional Logic #>     ├── Markdown [6 lines] #>     ├── Chunk [r, 7 lines] - bonus-student #>     └── Chunk [r, 25 lines] - bonus-key # Convert to tibble for easier inspection as_tibble(rmd) #> # A tibble: 24 × 4 #>    sec_h2                             type         label       ast            #>    <chr>                              <chr>        <chr>       <list>         #>  1 <NA>                               rmd_yaml     <NA>        <yaml>         #>  2 Setup                              rmd_heading  <NA>        <heading [h2]> #>  3 Setup                              rmd_markdown <NA>        <markdown>     #>  4 Setup                              rmd_chunk    setup       <chunk [r]>    #>  5 Exercise 1: Basic Data Exploration rmd_heading  <NA>        <heading [h2]> #>  6 Exercise 1: Basic Data Exploration rmd_markdown <NA>        <markdown>     #>  7 Exercise 1: Basic Data Exploration rmd_chunk    ex1-student <chunk [r]>    #>  8 Exercise 1: Basic Data Exploration rmd_chunk    ex1-key     <chunk [r]>    #>  9 Exercise 2: Data Visualization     rmd_heading  <NA>        <heading [h2]> #> 10 Exercise 2: Data Visualization     rmd_markdown <NA>        <markdown>     #> # ℹ 14 more rows"},{"path":"https://rundel.github.io/parsermd/articles/assignment-with-key.html","id":"creating-the-student-version","dir":"Articles","previous_headings":"","what":"Creating the Student Version","title":"Example - Assignment with Key","text":"create student version, need : Keep markdown content (instructions, problem statements) Keep student chunks (-student suffix) Remove solution chunks don’t want let student fact chunks just can use rmd_modify() remove -student suffix: Let’s see student version looks like document: can also save file:","code":"# Select student chunks and all non-chunk content student_version = rmd |>   rmd_select(     # Easier to specify the nodes we want to remove     !has_label(\"*-key\")   )  # Display the student version structure student_version #> ├── YAML [5 fields] #> ├── Heading [h2] - Setup #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 2 lines] - setup #> ├── Heading [h2] - Exercise 1: Basic Data Exploration #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 5 lines] - ex1-student #> ├── Heading [h2] - Exercise 2: Data Visualization #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 13 lines] - ex2-student #> ├── Heading [h2] - Exercise 3: Statistical Analysis #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 7 lines] - ex3-student #> ├── Heading [h2] - Exercise 4: Advanced Data Manipulation #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 5 lines] - ex4-student #> └── Heading [h2] - Bonus Exercise: Conditional Logic #>     ├── Markdown [6 lines] #>     └── Chunk [r, 7 lines] - bonus-student student_version = student_version |>   rmd_modify(     function(node) {       rmd_node_label(node) = stringr::str_remove(rmd_node_label(node), \"-student\")       node     },     has_label(\"*-student\")   )  # Show the first few chunks to see the label changes student_version #> ├── YAML [5 fields] #> ├── Heading [h2] - Setup #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 2 lines] - setup #> ├── Heading [h2] - Exercise 1: Basic Data Exploration #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 5 lines] - ex1 #> ├── Heading [h2] - Exercise 2: Data Visualization #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 13 lines] - ex2 #> ├── Heading [h2] - Exercise 3: Statistical Analysis #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 7 lines] - ex3 #> ├── Heading [h2] - Exercise 4: Advanced Data Manipulation #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 5 lines] - ex4 #> └── Heading [h2] - Bonus Exercise: Conditional Logic #>     ├── Markdown [6 lines] #>     └── Chunk [r, 7 lines] - bonus # Convert to document and display first few sections as_document(student_version) |>   cat(sep = \"\\n\") #> --- #> title: Homework 3 - Data Analysis with R #> author: Your Name #> date: 'Due: Friday, March 15, 2024' #> format: html #> execute: #>   warning: false #>   message: false #> --- #> #> ## Setup #> #> Load the required packages for this assignment: #> #> #> ```{r setup} #> library(tidyverse) #> library(palmerpenguins) #> ``` #> #> ## Exercise 1: Basic Data Exploration #> #> Examine the `penguins` dataset from the `palmerpenguins` package. Your task is to create a summary of the dataset that shows the number of observations and variables, and identify any missing values. #> #> #> ```{r ex1} #> # Write your code here to: #> # 1. Display the dimensions of the penguins dataset #> # 2. Show the structure of the dataset #> # 3. Count missing values in each column #> #> ``` #> #> ## Exercise 2: Data Visualization #> #> Create a scatter plot showing the relationship between flipper length and body mass for penguins. Color the points by species and add appropriate labels and a title. #> #> #> ```{r ex2} #> # Create a scatter plot with: #> # - x-axis: flipper_length_mm #> # - y-axis: body_mass_g #> # - color by species #> # - add appropriate labels and title #> #> ggplot(data = penguins, aes(x = ___, y = ___)) + #>   geom_point(aes(color = ___)) + #>   labs( #>     title = \"___\", #>     x = \"___\", #>     y = \"___\" #>   ) #> ``` #> #> ## Exercise 3: Statistical Analysis #> #> Calculate summary statistics for bill length by species. Create a table showing the mean, median, standard deviation, and count for each species. #> #> #> ```{r ex3} #> # Calculate summary statistics for bill_length_mm by species #> # Include: mean, median, standard deviation, and count #> # Remove missing values before calculating #> #> penguins %>% #>   # Add your code here #> #> ``` #> #> ## Exercise 4: Advanced Data Manipulation #> #> Filter the dataset to include only penguins with complete data (no missing values), then create a new variable called `bill_ratio` that represents the ratio of bill length to bill depth. Finally, identify which species has the highest average bill ratio. #> #> #> ```{r ex4} #> # Step 1: Filter for complete cases #> # Step 2: Create bill_ratio variable (bill_length_mm / bill_depth_mm) #> # Step 3: Calculate average bill_ratio by species #> # Step 4: Identify species with highest average ratio #> #> ``` #> #> ## Bonus Exercise: Conditional Logic #> #> Write a function that categorizes penguins as \"small\", \"medium\", or \"large\" based on their body mass. Use the following criteria: #> - Small: body mass < 3500g #> - Medium: body mass between 3500g and 4500g #> - Large: body mass > 4500g #> #> Apply this function to create a new column and create a summary table. #> #> #> ```{r bonus} #> # Create a function to categorize penguins by size #> categorize_size = function(mass) { #>   # Add your conditional logic here #> #> } #> #> # Apply the function and create summary #> ``` # Save student version (not run in vignette) as_document(student_version) |>   writeLines(\"homework-student.qmd\")"},{"path":"https://rundel.github.io/parsermd/articles/assignment-with-key.html","id":"creating-the-instructor-key","dir":"Articles","previous_headings":"","what":"Creating the Instructor Key","title":"Example - Assignment with Key","text":"instructor key, want : Keep markdown content context Keep solution chunks (-key suffix) Remove student chunks Let’s examine instructor key document:","code":"# Select solution chunks and all non-chunk content instructor_key = rmd |>   rmd_select(     # Again this is easier to specify the nodes we want to remove     !has_label(\"*-student\")   )  # Display the instructor key structure instructor_key #> ├── YAML [5 fields] #> ├── Heading [h2] - Setup #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 2 lines] - setup #> ├── Heading [h2] - Exercise 1: Basic Data Exploration #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 12 lines] - ex1-key #> ├── Heading [h2] - Exercise 2: Data Visualization #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 11 lines] - ex2-key #> ├── Heading [h2] - Exercise 3: Statistical Analysis #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 12 lines] - ex3-key #> ├── Heading [h2] - Exercise 4: Advanced Data Manipulation #> │   ├── Markdown [1 line] #> │   └── Chunk [r, 25 lines] - ex4-key #> └── Heading [h2] - Bonus Exercise: Conditional Logic #>     ├── Markdown [6 lines] #>     └── Chunk [r, 25 lines] - bonus-key # Convert to document instructor_doc = as_document(instructor_key)  # Display first part of the document cat(head(strsplit(instructor_doc, \"\\n\")[[1]], 50), sep = \"\\n\") #> ---"},{"path":"https://rundel.github.io/parsermd/articles/assignment-with-key.html","id":"creating-a-minimalist-key","dir":"Articles","previous_headings":"","what":"Creating a Minimalist Key","title":"Example - Assignment with Key","text":"Sometimes instructors may want streamlined version contains solution code without instructional text. can create : Keeping exercise headings solution chunks Removing markdown instructions Setting #| include: false setup chunk","code":"# Select only headings and solution chunks minimalist_key = rmd |>   rmd_select(     # Keep yaml and exercise headings for structure     has_type(\"rmd_yaml\"),     has_heading(c(\"Exercise *\", \"Bonus*\")),     # Keep only solution chunks     has_label(c(\"*-key\", \"setup\"))   ) |>   rmd_modify(     function(node) {       rmd_node_options(node) = list(include = FALSE)       node     },     has_label(\"setup\")   )  # Display the minimalist key structure minimalist_key #> ├── YAML [5 fields] #> ├── Chunk [r, 2 lines] - setup #> ├── Heading [h2] - Exercise 1: Basic Data Exploration #> │   └── Chunk [r, 12 lines] - ex1-key #> ├── Heading [h2] - Exercise 2: Data Visualization #> │   └── Chunk [r, 11 lines] - ex2-key #> ├── Heading [h2] - Exercise 3: Statistical Analysis #> │   └── Chunk [r, 12 lines] - ex3-key #> ├── Heading [h2] - Exercise 4: Advanced Data Manipulation #> │   └── Chunk [r, 25 lines] - ex4-key #> └── Heading [h2] - Bonus Exercise: Conditional Logic #>     └── Chunk [r, 25 lines] - bonus-key # Convert to document minimalist_doc = as_document(minimalist_key) cat(minimalist_doc, sep = \"\\n\") #> --- #> title: Homework 3 - Data Analysis with R #> author: Your Name #> date: 'Due: Friday, March 15, 2024' #> format: html #> execute: #>   warning: false #>   message: false #> --- #> #> ```{r setup} #> #| include: false #> library(tidyverse) #> library(palmerpenguins) #> ``` #> #> ## Exercise 1: Basic Data Exploration #> #> ```{r ex1-key} #> # Solution: Basic data exploration #> # 1. Display dimensions #> cat(\"Dataset dimensions:\", dim(penguins), \"\\n\") #> cat(\"Rows:\", nrow(penguins), \"Columns:\", ncol(penguins), \"\\n\\n\") #> #> # 2. Show structure #> str(penguins) #> #> # 3. Count missing values #> cat(\"\\nMissing values by column:\\n\") #> penguins %>% #>   summarise(across(everything(), ~ sum(is.na(.)))) #> ``` #> #> ## Exercise 2: Data Visualization #> #> ```{r ex2-key} #> # Solution: Scatter plot of flipper length vs body mass #> ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) + #>   geom_point(aes(color = species), alpha = 0.8, size = 2) + #>   labs( #>     title = \"Penguin Flipper Length vs Body Mass by Species\", #>     x = \"Flipper Length (mm)\", #>     y = \"Body Mass (g)\", #>     color = \"Species\" #>   ) + #>   theme_minimal() + #>   scale_color_viridis_d() #> ``` #> #> ## Exercise 3: Statistical Analysis #> #> ```{r ex3-key} #> # Solution: Summary statistics for bill length by species #> penguins %>% #>   filter(!is.na(bill_length_mm)) %>% #>   group_by(species) %>% #>   summarise( #>     count = n(), #>     mean_bill_length = round(mean(bill_length_mm), 2), #>     median_bill_length = round(median(bill_length_mm), 2), #>     sd_bill_length = round(sd(bill_length_mm), 2), #>     .groups = \"drop\" #>   ) %>% #>   arrange(desc(mean_bill_length)) #> ``` #> #> ## Exercise 4: Advanced Data Manipulation #> #> ```{r ex4-key} #> # Solution: Advanced data manipulation #> complete_penguins = penguins %>% #>   # Remove rows with any missing values #>   filter(complete.cases(.)) %>% #>   # Create bill_ratio variable #>   mutate(bill_ratio = bill_length_mm / bill_depth_mm) #> #> # Calculate average bill ratio by species #> bill_ratio_summary = complete_penguins %>% #>   group_by(species) %>% #>   summarise( #>     avg_bill_ratio = round(mean(bill_ratio), 3), #>     n = n(), #>     .groups = \"drop\" #>   ) %>% #>   arrange(desc(avg_bill_ratio)) #> #> print(bill_ratio_summary) #> #> # Identify species with highest average bill ratio #> highest_ratio_species = bill_ratio_summary %>% #>   slice_max(avg_bill_ratio, n = 1) %>% #>   pull(species) #> #> cat(\"\\nSpecies with highest average bill ratio:\", as.character(highest_ratio_species)) #> ``` #> #> ## Bonus Exercise: Conditional Logic #> #> ```{r bonus-key} #> # Solution: Conditional logic for size categorization #> categorize_size = function(mass) { #>   case_when( #>     is.na(mass) ~ \"Unknown\", #>     mass < 3500 ~ \"Small\", #>     mass >= 3500 & mass <= 4500 ~ \"Medium\", #>     mass > 4500 ~ \"Large\" #>   ) #> } #> #> # Apply the function and create summary #> penguins_with_size = penguins %>% #>   mutate(size_category = categorize_size(body_mass_g)) #> #> # Create summary table #> size_summary = penguins_with_size %>% #>   count(species, size_category) %>% #>   pivot_wider(names_from = size_category, values_from = n, values_fill = 0) #> #> print(size_summary) #> #> # Overall size distribution #> penguins_with_size %>% #>   count(size_category) %>% #>   mutate(percentage = round(n / sum(n) * 100, 1)) #> ```"},{"path":"https://rundel.github.io/parsermd/articles/assignment-with-key.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Example - Assignment with Key","text":"creating homework assignments processing parsermd, consider best practices: Clear Structure: Use headings organize exercises maintain hierarchy Meaningful Labels: Use descriptive chunk labels identify document components type (e.g., ex1-student, ex2-key) Testing: Always test generated versions ensure work correctly haven’t lost anything important (e.g. YAML front matter setup chunk)","code":""},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Modifying Rmd and Quarto Documents","text":"parsing selecting content R Markdown Quarto documents powerful, true potential parsermd realized start programmatically modifying documents. vignette covers core functions editing rmd_ast objects: rmd_modify, rmd_insert, rmd_fenced_div_wrap. tools allow perform wide range tasks, : Updating chunk options across entire document. Inserting boilerplate content specific sections. Wrapping existing content new structural elements, like callout blocks. Refactoring reorganizing documents automatically. Let’s start sample document ’ll modify throughout vignette. start parsing rmd_ast object.","code":"hw = system.file(\"examples/hw01.Rmd\", package = \"parsermd\") (rmd = parse_rmd(hw)) #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"modifying-nodes-with-rmd_modify","dir":"Articles","previous_headings":"","what":"Modifying Nodes with rmd_modify()","title":"Modifying Rmd and Quarto Documents","text":"rmd_modify() function primary tool changing properties existing nodes AST. works applying function nodes match specific selector. syntax rmd_modify(x, .f, ...), : x rmd_ast object. .f function takes node input returns modified node. ... selection arguments using tidyselect syntax, usually one rmd_select() helper functions. Let’s say want standardize figure dimensions plot chunks document. can use rmd_modify() update fig.width fig.height options. Notice figure dimensions changed fig.width = 6, fig.height = 3 new standardized fig.width = 8, fig.height = 5. Beyond changing metadata like chunk options, rmd_modify() can also used alter content nodes. example, perform search--replace operation markdown text specific section. Let’s replace word “correlation” “covariance” “Exercise 2” section document. example shows can define function operates markdown content programmatically change document’s text.","code":"rmd_figs = rmd |>   rmd_modify(     # The function to apply to each selected node     .f = function(node) {       rmd_node_set_options(node, fig.width = 8, fig.height = 5)     },     # The selection criteria - chunks that already have figure options     has_type(\"rmd_chunk\")   )  # Let's inspect the options of the original plot-dino chunk before modification rmd_select(rmd, has_label(\"plot-dino\"), keep_yaml = FALSE) |>   rmd_node_options() |>   str() #> List of 1 #>  $ :List of 2 #>   ..$ fig-height: num 3 #>   ..$ fig-width : num 6  # and after modification rmd_select(rmd_figs, has_label(\"plot-dino\"), keep_yaml = FALSE) |>   rmd_node_options() |>   str() #> List of 1 #>  $ :List of 2 #>   ..$ fig-height: num 5 #>   ..$ fig-width : num 8 # Create a function to replace text in markdown nodes replace_content = function(node) {   rmd_node_set_content(     node,     stringr::str_replace(       rmd_node_content(node),       \"correlation\",       \"covariance\"     )   ) }  # Apply this function to the \"Exercise 2\" section markdown nodes rmd_text = rmd |>   rmd_modify(     .f = replace_content,     by_section(\"Exercise 2\") & has_type(\"rmd_markdown\")   )  # Let's see the modified text rmd_text |>   rmd_select(by_section(\"Exercise 2\")) |>   as_document() |>   cat(sep = \"\\n\") #> --- #> title: Homework 01 - Hello R #> output: html_document #> --- #> #> ### Exercise 2 #> #> Plot `y` vs. `x` for the `dino` dataset. Then, calculate the covariance coefficient between x and y for this dataset. #> #> #> #### Solution #> #> (The answers for this Exercise are given for you below. But you should clean up some of the narrative so that it only includes what you want to turn in.) #> #> First let's plot the data in the dino dataset: #> #> #> ```{r plot-dino} #> #| fig-height: 3.0 #> #| fig-width: 6.0 #> dino_data <- datasaurus_dozen %>% #>   filter(dataset == \"dino\") #> #> ggplot(data = dino_data, mapping = aes(x = x, y = y)) + #>   geom_point() #> ``` #> #> And next calculate the covariance between `x` and `y` in this dataset: #> #> #> ```{r cor-dino} #> dino_data %>% #>   summarize(r = cor(x, y)) #> ```"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"example-changing-chunk-options","dir":"Articles","previous_headings":"","what":"Example: Changing Chunk Options","title":"Modifying Rmd and Quarto Documents","text":"Let’s say want standardize figure dimensions plot chunks document. can use rmd_modify() update fig.width fig.height options. Notice figure dimensions changed fig.width = 6, fig.height = 3 new standardized fig.width = 8, fig.height = 5.","code":"rmd_figs = rmd |>   rmd_modify(     # The function to apply to each selected node     .f = function(node) {       rmd_node_set_options(node, fig.width = 8, fig.height = 5)     },     # The selection criteria - chunks that already have figure options     has_type(\"rmd_chunk\")   )  # Let's inspect the options of the original plot-dino chunk before modification rmd_select(rmd, has_label(\"plot-dino\"), keep_yaml = FALSE) |>   rmd_node_options() |>   str() #> List of 1 #>  $ :List of 2 #>   ..$ fig-height: num 3 #>   ..$ fig-width : num 6  # and after modification rmd_select(rmd_figs, has_label(\"plot-dino\"), keep_yaml = FALSE) |>   rmd_node_options() |>   str() #> List of 1 #>  $ :List of 2 #>   ..$ fig-height: num 5 #>   ..$ fig-width : num 8"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"example-modifying-text-content","dir":"Articles","previous_headings":"","what":"Example: Modifying Text Content","title":"Modifying Rmd and Quarto Documents","text":"Beyond changing metadata like chunk options, rmd_modify() can also used alter content nodes. example, perform search--replace operation markdown text specific section. Let’s replace word “correlation” “covariance” “Exercise 2” section document. example shows can define function operates markdown content programmatically change document’s text.","code":"# Create a function to replace text in markdown nodes replace_content = function(node) {   rmd_node_set_content(     node,     stringr::str_replace(       rmd_node_content(node),       \"correlation\",       \"covariance\"     )   ) }  # Apply this function to the \"Exercise 2\" section markdown nodes rmd_text = rmd |>   rmd_modify(     .f = replace_content,     by_section(\"Exercise 2\") & has_type(\"rmd_markdown\")   )  # Let's see the modified text rmd_text |>   rmd_select(by_section(\"Exercise 2\")) |>   as_document() |>   cat(sep = \"\\n\") #> --- #> title: Homework 01 - Hello R #> output: html_document #> --- #> #> ### Exercise 2 #> #> Plot `y` vs. `x` for the `dino` dataset. Then, calculate the covariance coefficient between x and y for this dataset. #> #> #> #### Solution #> #> (The answers for this Exercise are given for you below. But you should clean up some of the narrative so that it only includes what you want to turn in.) #> #> First let's plot the data in the dino dataset: #> #> #> ```{r plot-dino} #> #| fig-height: 3.0 #> #| fig-width: 6.0 #> dino_data <- datasaurus_dozen %>% #>   filter(dataset == \"dino\") #> #> ggplot(data = dino_data, mapping = aes(x = x, y = y)) + #>   geom_point() #> ``` #> #> And next calculate the covariance between `x` and `y` in this dataset: #> #> #> ```{r cor-dino} #> dino_data %>% #>   summarize(r = cor(x, y)) #> ```"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"inserting-nodes-with-rmd_insert","dir":"Articles","previous_headings":"","what":"Inserting Nodes with rmd_insert()","title":"Modifying Rmd and Quarto Documents","text":"add new content document, can use rmd_insert(). function allows insert one rmd_node objects selected location. syntax rmd_insert(x, ..., nodes, location = c(\"\", \"\"), allow_multiple = FALSE), : x rmd_ast object. ... selection arguments specifying insertion point. nodes rmd_node objects insert. location specifies whether insert “” “” selected nodes. common task add setup chunk beginning document (right YAML front matter). Let’s create setup chunk insert . Now, let’s insert YAML header. setup chunk successfully added AST.","code":"# Create a new setup chunk setup = rmd_chunk(   engine = \"r\",   label = \"setup\",   options = list(include = FALSE),   code = \"knitr::opts_chunk$set(echo = TRUE)\" )  setup #> <rmd_chunk> #>  @ engine : chr \"r\" #>  @ label  : chr \"setup\" #>  @ options:List of 1 #>  .. $ include: logi FALSE #>  @ code   : chr \"knitr::opts_chunk$set(echo = TRUE)\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3 # Insert the new chunk after the YAML node rmd_setup = rmd |>   rmd_insert(     has_type(\"rmd_yaml\"),     nodes = setup,     location = \"after\"   )  # Print the top of the document to see the new chunk print(rmd_setup) #> ├── YAML [2 fields] #> ├── Chunk [r, 1 line] - setup #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"example-adding-a-setup-chunk","dir":"Articles","previous_headings":"","what":"Example: Adding a Setup Chunk","title":"Modifying Rmd and Quarto Documents","text":"common task add setup chunk beginning document (right YAML front matter). Let’s create setup chunk insert . Now, let’s insert YAML header. setup chunk successfully added AST.","code":"# Create a new setup chunk setup = rmd_chunk(   engine = \"r\",   label = \"setup\",   options = list(include = FALSE),   code = \"knitr::opts_chunk$set(echo = TRUE)\" )  setup #> <rmd_chunk> #>  @ engine : chr \"r\" #>  @ label  : chr \"setup\" #>  @ options:List of 1 #>  .. $ include: logi FALSE #>  @ code   : chr \"knitr::opts_chunk$set(echo = TRUE)\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3 # Insert the new chunk after the YAML node rmd_setup = rmd |>   rmd_insert(     has_type(\"rmd_yaml\"),     nodes = setup,     location = \"after\"   )  # Print the top of the document to see the new chunk print(rmd_setup) #> ├── YAML [2 fields] #> ├── Chunk [r, 1 line] - setup #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"working-with-structural-elements","dir":"Articles","previous_headings":"","what":"Working with Structural Elements","title":"Modifying Rmd and Quarto Documents","text":"Tools like Quarto introduced powerful structural elements like Fenced Divs (:::) Shortcodes ({{< ... >}}) creating complex layouts embedding content. parsermd provides functions create interact elements. rmd_fenced_div_wrap() function makes easy wrap existing nodes new fenced div, useful creating things like callout blocks columns. Let’s wrap “Exercise 1” section document “warning” callout block make prominent. fenced divs document, might want select content inside . can by_fdiv() selection helper. Let’s use document just created select content inside callout. by_fenced_div() helper powerful. takes another selection expression argument, allowing find divs based ID, classes, attributes, selects nodes contained within div. Shortcodes ({{< ... >}}) another powerful way embed complex dynamic content Quarto documents. parsermd allows find even modify shortcodes. Let’s imagine document uses shortcodes embed videos. Shortcodes part rmd_markdown nodes. find , can use rmd_extract_shortcodes() function content markdown node. function returns list rmd_shortcode objects, giving access function name arguments. Since shortcodes part markdown text, modifying involves changing lines property containing rmd_markdown node. Let’s say want replace video shortcodes placeholder message leave pagebreak intact. demonstrates can use rmd_modify combination text manipulation functions alter shortcodes.","code":"# Wrap the selected section in a warning callout rmd_wrap = rmd |>   rmd_fenced_div_wrap(     by_section(\"Exercise 1\"),     open = rmd_fenced_div_open(classes = \".callout-warning\", id = \"#note-callout\")   )  # Let's view the new structure as a document rmd_wrap |>   rmd_select(by_section(\"Exercise 1\")) #> ├── YAML [2 fields] #> ├── Fenced div (open) [#note-callout, .callout-warning] #> │   └── Heading [h3] - Exercise 1 #> │       ├── Markdown [1 line] #> │       └── Heading [h4] - Solution #> │           └── Markdown [1 line] #> └── Fenced div (close) rmd_select(   rmd_wrap,   by_fenced_div(class=\".callout-warning\"),   keep_yaml = FALSE ) #> ├── Fenced div (open) [#note-callout, .callout-warning] #> │   └── Heading [h3] - Exercise 1 #> │       ├── Markdown [1 line] #> │       └── Heading [h4] - Solution #> │           └── Markdown [1 line] #> └── Fenced div (close) doc = c(   \"---\",   \"title: My Video Collection\",   \"---\",   \"\",   \"# Introduction\",   \"\",   \"Here is my first video:\",   \"{{< video https://example.com/video1.mp4 >}}\",   \"\",   \"And here is another one with more options:\",   \"{{< video https://example.com/video2.mp4 title=\\\"Second Video\\\" >}}\",   \"\",   \"{{< pagebreak >}}\",   \"\",   \"That's all for now!\" )  # Parse the text qmd = parse_qmd(doc) # Select the markdown node containing the first shortcode md = rmd_select(qmd, has_type(\"rmd_markdown\") & has_shortcode(), keep_yaml = FALSE)   # Extract shortcodes from that node (shortcodes = rmd_extract_shortcodes(md, flatten = TRUE)) #> [[1]] #>  rmd_shortcode[0,44] {{< video https://example.com/video1.mp4 >}} #>  #> [[2]] #>  rmd_shortcode[0,65] {{< video https://example.com/video2.mp4 title=\"Second Video\" >}} #>  #> [[3]] #>  rmd_shortcode[0,17] {{< pagebreak >}} replace_videos = function(node) {   # Check if the node contains a video shortcode   if (rmd_has_shortcode(node, \"video\")) {     rmd_node_set_content(       node,       stringr::str_replace_all(         rmd_node_content(node),         \"\\\\{\\\\{< video .* >\\\\}\\\\}\",         \"[VIDEO PLACEHOLDER]\"       )     )   } else {     # If not a video shortcode, return the node unchanged     node   } }  # Apply the modification to the whole document qmd_modified = rmd_modify(qmd, replace_videos)  # See the result as_document(qmd_modified) |>   cat(sep=\"\\n\") #> --- #> title: My Video Collection #> --- #>  #> # Introduction #>  #> Here is my first video: #> [VIDEO PLACEHOLDER] #>  #> And here is another one with more options: #> [VIDEO PLACEHOLDER] #>  #> {{< pagebreak >}} #>  #> That's all for now!"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"wrapping-nodes-in-fenced-divs","dir":"Articles","previous_headings":"","what":"Wrapping Nodes in Fenced Divs","title":"Modifying Rmd and Quarto Documents","text":"rmd_fenced_div_wrap() function makes easy wrap existing nodes new fenced div, useful creating things like callout blocks columns. Let’s wrap “Exercise 1” section document “warning” callout block make prominent.","code":"# Wrap the selected section in a warning callout rmd_wrap = rmd |>   rmd_fenced_div_wrap(     by_section(\"Exercise 1\"),     open = rmd_fenced_div_open(classes = \".callout-warning\", id = \"#note-callout\")   )  # Let's view the new structure as a document rmd_wrap |>   rmd_select(by_section(\"Exercise 1\")) #> ├── YAML [2 fields] #> ├── Fenced div (open) [#note-callout, .callout-warning] #> │   └── Heading [h3] - Exercise 1 #> │       ├── Markdown [1 line] #> │       └── Heading [h4] - Solution #> │           └── Markdown [1 line] #> └── Fenced div (close)"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"selecting-content-inside-fenced-divs","dir":"Articles","previous_headings":"","what":"Selecting Content Inside Fenced Divs","title":"Modifying Rmd and Quarto Documents","text":"fenced divs document, might want select content inside . can by_fdiv() selection helper. Let’s use document just created select content inside callout. by_fenced_div() helper powerful. takes another selection expression argument, allowing find divs based ID, classes, attributes, selects nodes contained within div.","code":"rmd_select(   rmd_wrap,   by_fenced_div(class=\".callout-warning\"),   keep_yaml = FALSE ) #> ├── Fenced div (open) [#note-callout, .callout-warning] #> │   └── Heading [h3] - Exercise 1 #> │       ├── Markdown [1 line] #> │       └── Heading [h4] - Solution #> │           └── Markdown [1 line] #> └── Fenced div (close)"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"working-with-shortcodes","dir":"Articles","previous_headings":"","what":"Working with Shortcodes","title":"Modifying Rmd and Quarto Documents","text":"Shortcodes ({{< ... >}}) another powerful way embed complex dynamic content Quarto documents. parsermd allows find even modify shortcodes. Let’s imagine document uses shortcodes embed videos. Shortcodes part rmd_markdown nodes. find , can use rmd_extract_shortcodes() function content markdown node. function returns list rmd_shortcode objects, giving access function name arguments. Since shortcodes part markdown text, modifying involves changing lines property containing rmd_markdown node. Let’s say want replace video shortcodes placeholder message leave pagebreak intact. demonstrates can use rmd_modify combination text manipulation functions alter shortcodes.","code":"doc = c(   \"---\",   \"title: My Video Collection\",   \"---\",   \"\",   \"# Introduction\",   \"\",   \"Here is my first video:\",   \"{{< video https://example.com/video1.mp4 >}}\",   \"\",   \"And here is another one with more options:\",   \"{{< video https://example.com/video2.mp4 title=\\\"Second Video\\\" >}}\",   \"\",   \"{{< pagebreak >}}\",   \"\",   \"That's all for now!\" )  # Parse the text qmd = parse_qmd(doc) # Select the markdown node containing the first shortcode md = rmd_select(qmd, has_type(\"rmd_markdown\") & has_shortcode(), keep_yaml = FALSE)   # Extract shortcodes from that node (shortcodes = rmd_extract_shortcodes(md, flatten = TRUE)) #> [[1]] #>  rmd_shortcode[0,44] {{< video https://example.com/video1.mp4 >}} #>  #> [[2]] #>  rmd_shortcode[0,65] {{< video https://example.com/video2.mp4 title=\"Second Video\" >}} #>  #> [[3]] #>  rmd_shortcode[0,17] {{< pagebreak >}} replace_videos = function(node) {   # Check if the node contains a video shortcode   if (rmd_has_shortcode(node, \"video\")) {     rmd_node_set_content(       node,       stringr::str_replace_all(         rmd_node_content(node),         \"\\\\{\\\\{< video .* >\\\\}\\\\}\",         \"[VIDEO PLACEHOLDER]\"       )     )   } else {     # If not a video shortcode, return the node unchanged     node   } }  # Apply the modification to the whole document qmd_modified = rmd_modify(qmd, replace_videos)  # See the result as_document(qmd_modified) |>   cat(sep=\"\\n\") #> --- #> title: My Video Collection #> --- #>  #> # Introduction #>  #> Here is my first video: #> [VIDEO PLACEHOLDER] #>  #> And here is another one with more options: #> [VIDEO PLACEHOLDER] #>  #> {{< pagebreak >}} #>  #> That's all for now!"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"extracting-shortcodes","dir":"Articles","previous_headings":"Working with Structural Elements","what":"Extracting Shortcodes","title":"Modifying Rmd and Quarto Documents","text":"Let’s imagine document uses shortcodes embed videos. Shortcodes part rmd_markdown nodes. find , can use rmd_extract_shortcodes() function content markdown node. function returns list rmd_shortcode objects, giving access function name arguments.","code":"doc = c(   \"---\",   \"title: My Video Collection\",   \"---\",   \"\",   \"# Introduction\",   \"\",   \"Here is my first video:\",   \"{{< video https://example.com/video1.mp4 >}}\",   \"\",   \"And here is another one with more options:\",   \"{{< video https://example.com/video2.mp4 title=\\\"Second Video\\\" >}}\",   \"\",   \"{{< pagebreak >}}\",   \"\",   \"That's all for now!\" )  # Parse the text qmd = parse_qmd(doc) # Select the markdown node containing the first shortcode md = rmd_select(qmd, has_type(\"rmd_markdown\") & has_shortcode(), keep_yaml = FALSE)   # Extract shortcodes from that node (shortcodes = rmd_extract_shortcodes(md, flatten = TRUE)) #> [[1]] #>  rmd_shortcode[0,44] {{< video https://example.com/video1.mp4 >}} #>  #> [[2]] #>  rmd_shortcode[0,65] {{< video https://example.com/video2.mp4 title=\"Second Video\" >}} #>  #> [[3]] #>  rmd_shortcode[0,17] {{< pagebreak >}}"},{"path":"https://rundel.github.io/parsermd/articles/editing-documents.html","id":"modifying-shortcodes","dir":"Articles","previous_headings":"Working with Structural Elements","what":"Modifying Shortcodes","title":"Modifying Rmd and Quarto Documents","text":"Since shortcodes part markdown text, modifying involves changing lines property containing rmd_markdown node. Let’s say want replace video shortcodes placeholder message leave pagebreak intact. demonstrates can use rmd_modify combination text manipulation functions alter shortcodes.","code":"replace_videos = function(node) {   # Check if the node contains a video shortcode   if (rmd_has_shortcode(node, \"video\")) {     rmd_node_set_content(       node,       stringr::str_replace_all(         rmd_node_content(node),         \"\\\\{\\\\{< video .* >\\\\}\\\\}\",         \"[VIDEO PLACEHOLDER]\"       )     )   } else {     # If not a video shortcode, return the node unchanged     node   } }  # Apply the modification to the whole document qmd_modified = rmd_modify(qmd, replace_videos)  # See the result as_document(qmd_modified) |>   cat(sep=\"\\n\") #> --- #> title: My Video Collection #> --- #>  #> # Introduction #>  #> Here is my first video: #> [VIDEO PLACEHOLDER] #>  #> And here is another one with more options: #> [VIDEO PLACEHOLDER] #>  #> {{< pagebreak >}} #>  #> That's all for now!"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Know your nodes","text":"parsermd package parses R Markdown Quarto documents Abstract Syntax Tree (AST) representation. vignette introduces different types AST nodes properties, helping understand parsermd represents document structure. rmd_ast object serves container parsed document nodes. holds linear sequence nodes representing different document elements, node type corresponds specific R Markdown Quarto construct (headings, code chunks, text, etc.). Important: AST represents documents linear sequence nodes, nested tree structure. means structural elements like fenced divs represented separate opening closing nodes sequence, rather nodes children. default print method rmd_ast’s (flat = FALSE) presents implicit tree structure based heading levels. provides hierarchical view reflects document’s logical organization, content grouped headings based level. Properties: nodes: list containing parsed nodes document order Example: Raw text parsed: create rmd_ast object containing: rmd_yaml node title rmd_heading node “Introduction” rmd_markdown node “text.” rmd_chunk node R code Programmatic creation: Hierarchical view (flat = FALSE): Linear view (flat = TRUE):","code":"--- title: \"Example Document\" ---  # Introduction  This is some text.  ```{r} x <- 1:5 mean(x) ``` ast = rmd_ast(list(   rmd_yaml(list(title = \"Example Document\")),   rmd_heading(name = \"Introduction\", level = 1L),   rmd_markdown(lines = \"This is some text.\"),   rmd_chunk(     engine = \"r\",     code = c(\"x <- 1:5\", \"mean(x)\")   ) )) print(ast, flat = FALSE) #> ├── YAML [1 field] #> └── Heading [h1] - Introduction #>     ├── Markdown [1 line] #>     └── Chunk [r, 2 lines] - print(ast, flat = TRUE) #> ├── YAML [1 field] #> ├── Heading [h1] - Introduction #> ├── Markdown [1 line] #> └── Chunk [r, 2 lines] -"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"ast-container---rmd_ast","dir":"Articles","previous_headings":"","what":"AST Container - rmd_ast","title":"Know your nodes","text":"rmd_ast object serves container parsed document nodes. holds linear sequence nodes representing different document elements, node type corresponds specific R Markdown Quarto construct (headings, code chunks, text, etc.). Important: AST represents documents linear sequence nodes, nested tree structure. means structural elements like fenced divs represented separate opening closing nodes sequence, rather nodes children. default print method rmd_ast’s (flat = FALSE) presents implicit tree structure based heading levels. provides hierarchical view reflects document’s logical organization, content grouped headings based level. Properties: nodes: list containing parsed nodes document order Example: Raw text parsed: create rmd_ast object containing: rmd_yaml node title rmd_heading node “Introduction” rmd_markdown node “text.” rmd_chunk node R code Programmatic creation: Hierarchical view (flat = FALSE): Linear view (flat = TRUE):","code":"--- title: \"Example Document\" ---  # Introduction  This is some text.  ```{r} x <- 1:5 mean(x) ``` ast = rmd_ast(list(   rmd_yaml(list(title = \"Example Document\")),   rmd_heading(name = \"Introduction\", level = 1L),   rmd_markdown(lines = \"This is some text.\"),   rmd_chunk(     engine = \"r\",     code = c(\"x <- 1:5\", \"mean(x)\")   ) )) print(ast, flat = FALSE) #> ├── YAML [1 field] #> └── Heading [h1] - Introduction #>     ├── Markdown [1 line] #>     └── Chunk [r, 2 lines] - print(ast, flat = TRUE) #> ├── YAML [1 field] #> ├── Heading [h1] - Introduction #> ├── Markdown [1 line] #> └── Chunk [r, 2 lines] -"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"s7-class-system","dir":"Articles","previous_headings":"","what":"S7 Class System","title":"Know your nodes","text":"parsermd uses S7 object system AST node types. S7 provides modern, robust class system : Type safety: Properties validated objects created modified Performance: Efficient method dispatch memory usage Consistency: Uniform interface across node types Key S7 Features parsermd: node types inherit base rmd_node class Properties accessed using @ syntax (e.g., node@content) Validation ensures data integrity (proper types, lengths, etc.) Method dispatch works seamlessly generic functions Property Access:","code":"# Create a heading node heading = rmd_heading(name = \"Section Title\", level = 2L)  # Access properties with @ heading@name #> [1] \"Section Title\" heading@level #> [1] 2"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"core-node-types","dir":"Articles","previous_headings":"","what":"Core Node Types","title":"Know your nodes","text":"rmd_yaml node represents YAML front matter beginning documents. Properties: yaml: List containing parsed YAML content Example: Raw text parsed: Programmatic creation: rmd_heading node represents section headings markdown. Properties: name: Character string containing heading text level: Integer 1-6 indicating heading level (# = 1, ## = 2, etc.) Example: Raw text parsed: Programmatic creation: rmd_markdown node represents plain markdown text content. Properties: lines: Character vector containing markdown text lines Example: Raw text parsed: Programmatic creation: rmd_chunk node represents executable code chunks options metadata. Properties: engine: code engine (default: “r”) label: Optional chunk name/label options: List chunk options containing traditional YAML options code: Character vector containing code lines indent: Indentation string n_ticks: Number backticks used (default: 3) Chunk Option Formats: Chunks support two option formats can used independently together: Traditional format: Options specified chunk header engine label ```{{r chunk-label, eval=TRUE, echo=FALSE}} YAML format: Options specified YAML comments within chunk Option Conflict Resolution: option specified formats, YAML options take precedence traditional options. warning emitted conflicts occur: {r eval=TRUE} #| eval: false case, eval: false (YAML) wins eval=TRUE (traditional), parser emits: “YAML options override traditional options : eval” Type Handling: Traditional options: Always stored strings (e.g., \"TRUE\", \"5\") YAML options: Preserve proper R types (e.g., TRUE, 5L, 3.14) Examples: Traditional format chunk: YAML format chunk: Mixed format chunk (conflict): case, eval: false (YAML) overrides eval=TRUE (traditional). Programmatic creation: rmd_raw_chunk node represents raw output chunks specific formats. Properties: format: output format (e.g., “html”, “latex”) code: Character vector containing raw content indent: Indentation string n_ticks: Number backticks used Example: Raw text parsed: Programmatic creation: rmd_code_block node represents non-executable fenced code blocks. Properties: id: Optional HTML ID attribute classes: Character vector CSS classes (e.g., language names like “python”, “r”) attr: Named character vector key-value attributes (e.g., c(style=\"color:blue\")) code: Character vector containing code lines indent: Indentation string n_ticks: Number backticks used Example: Raw text parsed: Programmatic creation: rmd_code_block_literal node represents code blocks literal attribute capture using {...} syntax. format preserves raw attribute content exactly written, making ideal displaying code chunk examples. Properties: attr: Raw attribute string (exactly written {{ }}) code: Character vector containing code lines indent: Indentation string n_ticks: Number backticks used Example: Raw text parsed: {r, echo=TRUE, eval=FALSE} x <- 1:10 mean(x) Programmatic creation: Nested Braces Support: literal format can handle nested braces attributes: {{r, code='function() { return(1) }'}} captures attribute : \"r, code='function() { return(1) }'\" Fenced divs represented pairs nodes linear AST sequence. rmd_fenced_div_open node marks beginning fenced div block, rmd_fenced_div_close node marks end. content nodes considered inside fenced div. rmd_fenced_div_open Properties: id: Optional HTML ID attribute classes: Character vector CSS classes attr: Named character vector key-value attributes rmd_fenced_div_close Properties: None (just marker) Example: Raw text parsed: create sequence nodes: 1. rmd_fenced_div_open attributes 2. rmd_markdown “content inside fenced div.” 3. rmd_markdown “content .” 4. rmd_fenced_div_close Programmatic creation:","code":"--- title: \"My Document\" author: \"John Doe\" date: \"2023-01-01\" --- yaml_node = rmd_yaml(list(   title = \"My Document\",   author = \"John Doe\",   date = \"2023-01-01\" )) yaml_node #> <rmd_yaml> #>  @ yaml:List of 3 #>  .. $ title : chr \"My Document\" #>  .. $ author: chr \"John Doe\" #>  .. $ date  : chr \"2023-01-01\" # Introduction heading_node = rmd_heading(   name = \"Introduction\",    level = 1L ) heading_node #> <rmd_heading> #>  @ name : chr \"Introduction\" #>  @ level: int 1 This is a paragraph. With multiple lines. markdown_node = rmd_markdown(   lines = c(\"This is a paragraph.\", \"With multiple lines.\") ) markdown_node #> <rmd_markdown> #>  @ lines: chr [1:2] \"This is a paragraph.\" \"With multiple lines.\" ```{r chunk-label} #| eval: true #| echo: false ``` ```{r example, eval=TRUE, echo=FALSE} x <- 1:10 mean(x) ``` ```{r example} #| eval: true #| echo: false x <- 1:10 mean(x) ``` ```{r example, eval=TRUE} #| eval: false #| message: false x <- 1:10 mean(x) ``` # Traditional-style options chunk_node_traditional = rmd_chunk(   engine = \"r\",   label = \"example\",   options = list(eval = \"TRUE\", echo = \"FALSE\"),   code = c(\"x <- 1:10\", \"mean(x)\") )  # YAML-style options with proper types chunk_node_yaml = rmd_chunk(   engine = \"r\",   label = \"example\",   options = list(eval = TRUE, echo = FALSE),   code = c(\"x <- 1:10\", \"mean(x)\") )  chunk_node_yaml #> <rmd_chunk> #>  @ engine : chr \"r\" #>  @ label  : chr \"example\" #>  @ options:List of 2 #>  .. $ eval: logi TRUE #>  .. $ echo: logi FALSE #>  @ code   : chr [1:2] \"x <- 1:10\" \"mean(x)\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3 ```{=html} <div class='custom'>   <p>Custom HTML content<\/p> <\/div> ``` raw_chunk_node = rmd_raw_chunk(   format = \"html\",   code = c(     \"<div class='custom'>\",      \"  <p>Custom HTML content<\/p>\",      \"<\/div>\"   ) ) raw_chunk_node #> <rmd_raw_chunk> #>  @ format : chr \"html\" #>  @ code   : chr [1:3] \"<div class='custom'>\" \"  <p>Custom HTML content<\/p>\" ... #>  @ indent : chr \"\" #>  @ n_ticks: int 3 ```python def hello():     print('Hello, World!') ``` code_block_node = rmd_code_block(   classes = c(\"python\"),   code = c(     \"def hello():\",      \"    print('Hello, World!')\"   ) ) code_block_node #> <rmd_code_block> #>  @ id     : chr(0)  #>  @ classes: chr \"python\" #>  @ attr   : chr(0)  #>  @ code   : chr [1:2] \"def hello():\" \"    print('Hello, World!')\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3 code_block_literal_node = rmd_code_block_literal(   attr = \"r, echo=TRUE, eval=FALSE\",   code = c(     \"x <- 1:10\",      \"mean(x)\"   ) ) code_block_literal_node #> <rmd_code_block_literal> #>  @ attr   : chr \"r, echo=TRUE, eval=FALSE\" #>  @ code   : chr [1:2] \"x <- 1:10\" \"mean(x)\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3 ::: {.warning #important} This content is inside the fenced div.  More content here. ::: # Create the opening node fenced_div_open_node = rmd_fenced_div_open(   classes = c(\".warning\"),   attr = c(id = \"important\") )  # Create the closing node fenced_div_close_node = rmd_fenced_div_close()  # These would typically be combined with content nodes in an rmd_ast ast_with_div = rmd_ast(list(   fenced_div_open_node,   rmd_markdown(     lines = \"This content is inside the fenced div.\"   ),   rmd_markdown(     lines = \"More content here.\"   ),   fenced_div_close_node ))"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"document-structure-nodes","dir":"Articles","previous_headings":"","what":"Document Structure Nodes","title":"Know your nodes","text":"rmd_yaml node represents YAML front matter beginning documents. Properties: yaml: List containing parsed YAML content Example: Raw text parsed: Programmatic creation: rmd_heading node represents section headings markdown. Properties: name: Character string containing heading text level: Integer 1-6 indicating heading level (# = 1, ## = 2, etc.) Example: Raw text parsed: Programmatic creation: rmd_markdown node represents plain markdown text content. Properties: lines: Character vector containing markdown text lines Example: Raw text parsed: Programmatic creation:","code":"--- title: \"My Document\" author: \"John Doe\" date: \"2023-01-01\" --- yaml_node = rmd_yaml(list(   title = \"My Document\",   author = \"John Doe\",   date = \"2023-01-01\" )) yaml_node #> <rmd_yaml> #>  @ yaml:List of 3 #>  .. $ title : chr \"My Document\" #>  .. $ author: chr \"John Doe\" #>  .. $ date  : chr \"2023-01-01\" # Introduction heading_node = rmd_heading(   name = \"Introduction\",    level = 1L ) heading_node #> <rmd_heading> #>  @ name : chr \"Introduction\" #>  @ level: int 1 This is a paragraph. With multiple lines. markdown_node = rmd_markdown(   lines = c(\"This is a paragraph.\", \"With multiple lines.\") ) markdown_node #> <rmd_markdown> #>  @ lines: chr [1:2] \"This is a paragraph.\" \"With multiple lines.\""},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"yaml-header---rmd_yaml","dir":"Articles","previous_headings":"Core Node Types","what":"YAML Header - rmd_yaml","title":"Know your nodes","text":"rmd_yaml node represents YAML front matter beginning documents. Properties: yaml: List containing parsed YAML content Example: Raw text parsed: Programmatic creation:","code":"--- title: \"My Document\" author: \"John Doe\" date: \"2023-01-01\" --- yaml_node = rmd_yaml(list(   title = \"My Document\",   author = \"John Doe\",   date = \"2023-01-01\" )) yaml_node #> <rmd_yaml> #>  @ yaml:List of 3 #>  .. $ title : chr \"My Document\" #>  .. $ author: chr \"John Doe\" #>  .. $ date  : chr \"2023-01-01\""},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"markdown-headings---rmd_heading","dir":"Articles","previous_headings":"Core Node Types","what":"Markdown Headings - rmd_heading","title":"Know your nodes","text":"rmd_heading node represents section headings markdown. Properties: name: Character string containing heading text level: Integer 1-6 indicating heading level (# = 1, ## = 2, etc.) Example: Raw text parsed: Programmatic creation:","code":"# Introduction heading_node = rmd_heading(   name = \"Introduction\",    level = 1L ) heading_node #> <rmd_heading> #>  @ name : chr \"Introduction\" #>  @ level: int 1"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"markdown-text---rmd_markdown","dir":"Articles","previous_headings":"Core Node Types","what":"Markdown Text - rmd_markdown","title":"Know your nodes","text":"rmd_markdown node represents plain markdown text content. Properties: lines: Character vector containing markdown text lines Example: Raw text parsed: Programmatic creation:","code":"This is a paragraph. With multiple lines. markdown_node = rmd_markdown(   lines = c(\"This is a paragraph.\", \"With multiple lines.\") ) markdown_node #> <rmd_markdown> #>  @ lines: chr [1:2] \"This is a paragraph.\" \"With multiple lines.\""},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"code-and-execution-nodes","dir":"Articles","previous_headings":"","what":"Code and Execution Nodes","title":"Know your nodes","text":"rmd_chunk node represents executable code chunks options metadata. Properties: engine: code engine (default: “r”) label: Optional chunk name/label options: List chunk options containing traditional YAML options code: Character vector containing code lines indent: Indentation string n_ticks: Number backticks used (default: 3) Chunk Option Formats: Chunks support two option formats can used independently together: Traditional format: Options specified chunk header engine label ```{{r chunk-label, eval=TRUE, echo=FALSE}} YAML format: Options specified YAML comments within chunk Option Conflict Resolution: option specified formats, YAML options take precedence traditional options. warning emitted conflicts occur: {r eval=TRUE} #| eval: false case, eval: false (YAML) wins eval=TRUE (traditional), parser emits: “YAML options override traditional options : eval” Type Handling: Traditional options: Always stored strings (e.g., \"TRUE\", \"5\") YAML options: Preserve proper R types (e.g., TRUE, 5L, 3.14) Examples: Traditional format chunk: YAML format chunk: Mixed format chunk (conflict): case, eval: false (YAML) overrides eval=TRUE (traditional). Programmatic creation: rmd_raw_chunk node represents raw output chunks specific formats. Properties: format: output format (e.g., “html”, “latex”) code: Character vector containing raw content indent: Indentation string n_ticks: Number backticks used Example: Raw text parsed: Programmatic creation: rmd_code_block node represents non-executable fenced code blocks. Properties: id: Optional HTML ID attribute classes: Character vector CSS classes (e.g., language names like “python”, “r”) attr: Named character vector key-value attributes (e.g., c(style=\"color:blue\")) code: Character vector containing code lines indent: Indentation string n_ticks: Number backticks used Example: Raw text parsed: Programmatic creation: rmd_code_block_literal node represents code blocks literal attribute capture using {...} syntax. format preserves raw attribute content exactly written, making ideal displaying code chunk examples. Properties: attr: Raw attribute string (exactly written {{ }}) code: Character vector containing code lines indent: Indentation string n_ticks: Number backticks used Example: Raw text parsed: {r, echo=TRUE, eval=FALSE} x <- 1:10 mean(x) Programmatic creation: Nested Braces Support: literal format can handle nested braces attributes: {{r, code='function() { return(1) }'}} captures attribute : \"r, code='function() { return(1) }'\"","code":"```{r chunk-label} #| eval: true #| echo: false ``` ```{r example, eval=TRUE, echo=FALSE} x <- 1:10 mean(x) ``` ```{r example} #| eval: true #| echo: false x <- 1:10 mean(x) ``` ```{r example, eval=TRUE} #| eval: false #| message: false x <- 1:10 mean(x) ``` # Traditional-style options chunk_node_traditional = rmd_chunk(   engine = \"r\",   label = \"example\",   options = list(eval = \"TRUE\", echo = \"FALSE\"),   code = c(\"x <- 1:10\", \"mean(x)\") )  # YAML-style options with proper types chunk_node_yaml = rmd_chunk(   engine = \"r\",   label = \"example\",   options = list(eval = TRUE, echo = FALSE),   code = c(\"x <- 1:10\", \"mean(x)\") )  chunk_node_yaml #> <rmd_chunk> #>  @ engine : chr \"r\" #>  @ label  : chr \"example\" #>  @ options:List of 2 #>  .. $ eval: logi TRUE #>  .. $ echo: logi FALSE #>  @ code   : chr [1:2] \"x <- 1:10\" \"mean(x)\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3 ```{=html} <div class='custom'>   <p>Custom HTML content<\/p> <\/div> ``` raw_chunk_node = rmd_raw_chunk(   format = \"html\",   code = c(     \"<div class='custom'>\",      \"  <p>Custom HTML content<\/p>\",      \"<\/div>\"   ) ) raw_chunk_node #> <rmd_raw_chunk> #>  @ format : chr \"html\" #>  @ code   : chr [1:3] \"<div class='custom'>\" \"  <p>Custom HTML content<\/p>\" ... #>  @ indent : chr \"\" #>  @ n_ticks: int 3 ```python def hello():     print('Hello, World!') ``` code_block_node = rmd_code_block(   classes = c(\"python\"),   code = c(     \"def hello():\",      \"    print('Hello, World!')\"   ) ) code_block_node #> <rmd_code_block> #>  @ id     : chr(0)  #>  @ classes: chr \"python\" #>  @ attr   : chr(0)  #>  @ code   : chr [1:2] \"def hello():\" \"    print('Hello, World!')\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3 code_block_literal_node = rmd_code_block_literal(   attr = \"r, echo=TRUE, eval=FALSE\",   code = c(     \"x <- 1:10\",      \"mean(x)\"   ) ) code_block_literal_node #> <rmd_code_block_literal> #>  @ attr   : chr \"r, echo=TRUE, eval=FALSE\" #>  @ code   : chr [1:2] \"x <- 1:10\" \"mean(x)\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"executable-code-chunks---rmd_chunk","dir":"Articles","previous_headings":"Core Node Types","what":"Executable Code Chunks - rmd_chunk","title":"Know your nodes","text":"rmd_chunk node represents executable code chunks options metadata. Properties: engine: code engine (default: “r”) label: Optional chunk name/label options: List chunk options containing traditional YAML options code: Character vector containing code lines indent: Indentation string n_ticks: Number backticks used (default: 3) Chunk Option Formats: Chunks support two option formats can used independently together: Traditional format: Options specified chunk header engine label ```{{r chunk-label, eval=TRUE, echo=FALSE}} YAML format: Options specified YAML comments within chunk Option Conflict Resolution: option specified formats, YAML options take precedence traditional options. warning emitted conflicts occur: {r eval=TRUE} #| eval: false case, eval: false (YAML) wins eval=TRUE (traditional), parser emits: “YAML options override traditional options : eval” Type Handling: Traditional options: Always stored strings (e.g., \"TRUE\", \"5\") YAML options: Preserve proper R types (e.g., TRUE, 5L, 3.14) Examples: Traditional format chunk: YAML format chunk: Mixed format chunk (conflict): case, eval: false (YAML) overrides eval=TRUE (traditional). Programmatic creation:","code":"```{r chunk-label} #| eval: true #| echo: false ``` ```{r example, eval=TRUE, echo=FALSE} x <- 1:10 mean(x) ``` ```{r example} #| eval: true #| echo: false x <- 1:10 mean(x) ``` ```{r example, eval=TRUE} #| eval: false #| message: false x <- 1:10 mean(x) ``` # Traditional-style options chunk_node_traditional = rmd_chunk(   engine = \"r\",   label = \"example\",   options = list(eval = \"TRUE\", echo = \"FALSE\"),   code = c(\"x <- 1:10\", \"mean(x)\") )  # YAML-style options with proper types chunk_node_yaml = rmd_chunk(   engine = \"r\",   label = \"example\",   options = list(eval = TRUE, echo = FALSE),   code = c(\"x <- 1:10\", \"mean(x)\") )  chunk_node_yaml #> <rmd_chunk> #>  @ engine : chr \"r\" #>  @ label  : chr \"example\" #>  @ options:List of 2 #>  .. $ eval: logi TRUE #>  .. $ echo: logi FALSE #>  @ code   : chr [1:2] \"x <- 1:10\" \"mean(x)\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"raw-output-chunks---rmd_raw_chunk","dir":"Articles","previous_headings":"Core Node Types","what":"Raw Output Chunks - rmd_raw_chunk","title":"Know your nodes","text":"rmd_raw_chunk node represents raw output chunks specific formats. Properties: format: output format (e.g., “html”, “latex”) code: Character vector containing raw content indent: Indentation string n_ticks: Number backticks used Example: Raw text parsed: Programmatic creation:","code":"```{=html} <div class='custom'>   <p>Custom HTML content<\/p> <\/div> ``` raw_chunk_node = rmd_raw_chunk(   format = \"html\",   code = c(     \"<div class='custom'>\",      \"  <p>Custom HTML content<\/p>\",      \"<\/div>\"   ) ) raw_chunk_node #> <rmd_raw_chunk> #>  @ format : chr \"html\" #>  @ code   : chr [1:3] \"<div class='custom'>\" \"  <p>Custom HTML content<\/p>\" ... #>  @ indent : chr \"\" #>  @ n_ticks: int 3"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"fenced-code-blocks---rmd_code_block","dir":"Articles","previous_headings":"Core Node Types","what":"Fenced Code Blocks - rmd_code_block","title":"Know your nodes","text":"rmd_code_block node represents non-executable fenced code blocks. Properties: id: Optional HTML ID attribute classes: Character vector CSS classes (e.g., language names like “python”, “r”) attr: Named character vector key-value attributes (e.g., c(style=\"color:blue\")) code: Character vector containing code lines indent: Indentation string n_ticks: Number backticks used Example: Raw text parsed: Programmatic creation:","code":"```python def hello():     print('Hello, World!') ``` code_block_node = rmd_code_block(   classes = c(\"python\"),   code = c(     \"def hello():\",      \"    print('Hello, World!')\"   ) ) code_block_node #> <rmd_code_block> #>  @ id     : chr(0)  #>  @ classes: chr \"python\" #>  @ attr   : chr(0)  #>  @ code   : chr [1:2] \"def hello():\" \"    print('Hello, World!')\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"code-block-literals---rmd_code_block_literal","dir":"Articles","previous_headings":"Core Node Types","what":"Code Block Literals - rmd_code_block_literal","title":"Know your nodes","text":"rmd_code_block_literal node represents code blocks literal attribute capture using {...} syntax. format preserves raw attribute content exactly written, making ideal displaying code chunk examples. Properties: attr: Raw attribute string (exactly written {{ }}) code: Character vector containing code lines indent: Indentation string n_ticks: Number backticks used Example: Raw text parsed: {r, echo=TRUE, eval=FALSE} x <- 1:10 mean(x) Programmatic creation: Nested Braces Support: literal format can handle nested braces attributes: {{r, code='function() { return(1) }'}} captures attribute : \"r, code='function() { return(1) }'\"","code":"code_block_literal_node = rmd_code_block_literal(   attr = \"r, echo=TRUE, eval=FALSE\",   code = c(     \"x <- 1:10\",      \"mean(x)\"   ) ) code_block_literal_node #> <rmd_code_block_literal> #>  @ attr   : chr \"r, echo=TRUE, eval=FALSE\" #>  @ code   : chr [1:2] \"x <- 1:10\" \"mean(x)\" #>  @ indent : chr \"\" #>  @ n_ticks: int 3"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"structural-elements","dir":"Articles","previous_headings":"","what":"Structural Elements","title":"Know your nodes","text":"Fenced divs represented pairs nodes linear AST sequence. rmd_fenced_div_open node marks beginning fenced div block, rmd_fenced_div_close node marks end. content nodes considered inside fenced div. rmd_fenced_div_open Properties: id: Optional HTML ID attribute classes: Character vector CSS classes attr: Named character vector key-value attributes rmd_fenced_div_close Properties: None (just marker) Example: Raw text parsed: create sequence nodes: 1. rmd_fenced_div_open attributes 2. rmd_markdown “content inside fenced div.” 3. rmd_markdown “content .” 4. rmd_fenced_div_close Programmatic creation:","code":"::: {.warning #important} This content is inside the fenced div.  More content here. ::: # Create the opening node fenced_div_open_node = rmd_fenced_div_open(   classes = c(\".warning\"),   attr = c(id = \"important\") )  # Create the closing node fenced_div_close_node = rmd_fenced_div_close()  # These would typically be combined with content nodes in an rmd_ast ast_with_div = rmd_ast(list(   fenced_div_open_node,   rmd_markdown(     lines = \"This content is inside the fenced div.\"   ),   rmd_markdown(     lines = \"More content here.\"   ),   fenced_div_close_node ))"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"fenced-divs---rmd_fenced_div_open-rmd_fenced_div_close","dir":"Articles","previous_headings":"Core Node Types","what":"Fenced Divs - rmd_fenced_div_open & rmd_fenced_div_close","title":"Know your nodes","text":"Fenced divs represented pairs nodes linear AST sequence. rmd_fenced_div_open node marks beginning fenced div block, rmd_fenced_div_close node marks end. content nodes considered inside fenced div. rmd_fenced_div_open Properties: id: Optional HTML ID attribute classes: Character vector CSS classes attr: Named character vector key-value attributes rmd_fenced_div_close Properties: None (just marker) Example: Raw text parsed: create sequence nodes: 1. rmd_fenced_div_open attributes 2. rmd_markdown “content inside fenced div.” 3. rmd_markdown “content .” 4. rmd_fenced_div_close Programmatic creation:","code":"::: {.warning #important} This content is inside the fenced div.  More content here. ::: # Create the opening node fenced_div_open_node = rmd_fenced_div_open(   classes = c(\".warning\"),   attr = c(id = \"important\") )  # Create the closing node fenced_div_close_node = rmd_fenced_div_close()  # These would typically be combined with content nodes in an rmd_ast ast_with_div = rmd_ast(list(   fenced_div_open_node,   rmd_markdown(     lines = \"This content is inside the fenced div.\"   ),   rmd_markdown(     lines = \"More content here.\"   ),   fenced_div_close_node ))"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"extracted-elements","dir":"Articles","previous_headings":"","what":"Extracted Elements","title":"Know your nodes","text":"following classes represent elements can extracted AST nodes secondary parsing, rather direct nodes AST structure. elements found within markdown text code content. rmd_inline_code class represents inline code expressions extracted markdown text. Properties: engine: code engine (empty string static code) code: inline code content braced: Whether code uses braced syntax start: Starting position source text length: Length inline code Example: Raw text containing inline code: Programmatic creation: rmd_shortcode class represents Quarto shortcode function calls extracted markdown content. Properties: func: shortcode function name args: Character vector arguments start: Starting position source text length: Length shortcode Example: Raw text containing shortcode: Programmatic creation: rmd_span class represents inline span elements attributes extracted markdown text. Properties: text: text content span id: Optional HTML ID (must start ‘#’ present) classes: Character vector CSS classes (must start ‘.’ present) attr: Named character vector additional attributes Example: Raw text containing span: Programmatic creation: utility functions extract elements AST nodes: rmd_extract_inline_code(): Extract inline code text rmd_extract_shortcodes(): Extract shortcodes text rmd_extract_spans(): Extract spans text rmd_has_inline_code(): Check text contains inline code rmd_has_shortcode(): Check text contains shortcodes rmd_has_span(): Check text contains spans","code":"The result is 4. # Create directly inline_code_obj = rmd_inline_code(   engine = \"r\",   code = \"2 + 2\",   braced = FALSE ) inline_code_obj #>  rmd_inline_code[-1,-1] `r 2 + 2` {{< embed type=video src=example.mp4 >}} # Create directly shortcode_obj = rmd_shortcode(   func = \"embed\",   args = c(\"type=video\", \"src=example.mp4\") ) shortcode_obj #>  rmd_shortcode[-1,-1] {{< embed type=video src=example.mp4 >}} [Important text]{.highlight #key} # Create directly span_obj = rmd_span(   text = \"Important text\",   id = c(\"#key\"),   classes = c(\".highlight\") ) span_obj #>  rmd_span [Important text]{#key .highlight}"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"inline-code---rmd_inline_code","dir":"Articles","previous_headings":"","what":"Inline Code - rmd_inline_code","title":"Know your nodes","text":"rmd_inline_code class represents inline code expressions extracted markdown text. Properties: engine: code engine (empty string static code) code: inline code content braced: Whether code uses braced syntax start: Starting position source text length: Length inline code Example: Raw text containing inline code: Programmatic creation:","code":"The result is 4. # Create directly inline_code_obj = rmd_inline_code(   engine = \"r\",   code = \"2 + 2\",   braced = FALSE ) inline_code_obj #>  rmd_inline_code[-1,-1] `r 2 + 2`"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"shortcode-function-calls---rmd_shortcode","dir":"Articles","previous_headings":"","what":"Shortcode Function Calls - rmd_shortcode","title":"Know your nodes","text":"rmd_shortcode class represents Quarto shortcode function calls extracted markdown content. Properties: func: shortcode function name args: Character vector arguments start: Starting position source text length: Length shortcode Example: Raw text containing shortcode: Programmatic creation:","code":"{{< embed type=video src=example.mp4 >}} # Create directly shortcode_obj = rmd_shortcode(   func = \"embed\",   args = c(\"type=video\", \"src=example.mp4\") ) shortcode_obj #>  rmd_shortcode[-1,-1] {{< embed type=video src=example.mp4 >}}"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"spans---rmd_span","dir":"Articles","previous_headings":"","what":"Spans - rmd_span","title":"Know your nodes","text":"rmd_span class represents inline span elements attributes extracted markdown text. Properties: text: text content span id: Optional HTML ID (must start ‘#’ present) classes: Character vector CSS classes (must start ‘.’ present) attr: Named character vector additional attributes Example: Raw text containing span: Programmatic creation:","code":"[Important text]{.highlight #key} # Create directly span_obj = rmd_span(   text = \"Important text\",   id = c(\"#key\"),   classes = c(\".highlight\") ) span_obj #>  rmd_span [Important text]{#key .highlight}"},{"path":"https://rundel.github.io/parsermd/articles/know-your-nodes.html","id":"extraction-functions","dir":"Articles","previous_headings":"","what":"Extraction Functions","title":"Know your nodes","text":"utility functions extract elements AST nodes: rmd_extract_inline_code(): Extract inline code text rmd_extract_shortcodes(): Extract shortcodes text rmd_extract_spans(): Extract spans text rmd_has_inline_code(): Check text contains inline code rmd_has_shortcode(): Check text contains shortcodes rmd_has_span(): Check text contains spans","code":""},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"parsermd","dir":"Articles","previous_headings":"","what":"parsermd","title":"Getting Started","text":"goal parsermd extract content R Markdown file allow programmatic interactions document’s contents (.e. code chunks markdown text). goal capture fundamental structure document attempt parse every detail Rmd. Specifically, yaml front matter, markdown text, R code read text lines allowing processed using tools. package supports traditional chunk options (specified chunk header) YAML-style chunk options (specified special comments within chunks). formats used option, YAML options take precedence. parsermd can installed CRAN : can install latest development version parsermd GitHub : basic example shows basic abstract syntax tree (AST) results parsing simple Rmd file, R Markdown document parsed stored flat, ordered list object containing tagged elements. default package present hierarchical view document chunks markdown text nested within headings, shown default print method rmd_ast objects. prefer see underlying flat structure, can printed setting flat = TRUE print. Additionally, ease manipulation AST package supports transformation object tidy tibble as_tibble .data.frame (return tibble). possible convert data frames back rmd_ast. Finally, can also convert rmd_ast back R Markdown document via as_document parsed R Markdown document, variety things can new abstract syntax tree (ast). demonstrate basic functionality within parsermd manipulate edit objects well check properties. Say interested examining solution student entered Exercise 1 - can get access using rmd_select function selection helper functions, specifically by_section helper. view content instead AST can use as_document() function, Note gives us Exercise 1 Solution headings contained markdown text, wanted markdown text can refine selector include nodes type rmd_markdown via has_type helper. approach uses tidyselect & operator within selection find intersection selectors by_section(c(\"Exercise 1\", \"Solution\")) has_type(\"rmd_markdown\"). Alternative result can achieved chaining multiple rmd_selects together, One useful feature by_section() has_label() selection helpers support glob style pattern matching. can following extract solutions document: Similarly, wanted just extract chunks involve plotting can match chunk labels “plot” prefix,","code":"install.packages(\"parsermd\") remotes::install_github(\"rundel/parsermd\") library(parsermd) rmd = parsermd::parse_rmd(system.file(\"examples/minimal.Rmd\", package = \"parsermd\")) print(rmd) #> ├── YAML [4 fields] #> ├── Heading [h1] - Setup #> │   └── Chunk [r, 1 line] - setup #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [5 lines] #>     │   ├── Chunk [r, 1 line] - cars #>     │   └── Chunk [r, 1 line] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [1 line] #>         ├── Chunk [r, 1 line] - pressure #>         └── Markdown [2 lines] print(rmd, flat = TRUE) #> ├── YAML [4 fields] #> ├── Heading [h1] - Setup #> ├── Chunk [r, 1 line] - setup #> ├── Heading [h1] - Content #> ├── Heading [h2] - R Markdown #> ├── Markdown [5 lines] #> ├── Chunk [r, 1 line] - cars #> ├── Chunk [r, 1 line] - unnamed-chunk-1 #> ├── Heading [h2] - Including Plots #> ├── Markdown [1 line] #> ├── Chunk [r, 1 line] - pressure #> └── Markdown [2 lines] as_tibble(rmd) #> # A tibble: 12 × 5 #>    sec_h1  sec_h2          type         label           ast            #>    <chr>   <chr>           <chr>        <chr>           <list>         #>  1 <NA>    <NA>            rmd_yaml     <NA>            <yaml>         #>  2 Setup   <NA>            rmd_heading  <NA>            <heading [h1]> #>  3 Setup   <NA>            rmd_chunk    setup           <chunk [r]>    #>  4 Content <NA>            rmd_heading  <NA>            <heading [h1]> #>  5 Content R Markdown      rmd_heading  <NA>            <heading [h2]> #>  6 Content R Markdown      rmd_markdown <NA>            <markdown>     #>  7 Content R Markdown      rmd_chunk    cars            <chunk [r]>    #>  8 Content R Markdown      rmd_chunk    unnamed-chunk-1 <chunk [r]>    #>  9 Content Including Plots rmd_heading  <NA>            <heading [h2]> #> 10 Content Including Plots rmd_markdown <NA>            <markdown>     #> 11 Content Including Plots rmd_chunk    pressure        <chunk [r]>    #> 12 Content Including Plots rmd_markdown <NA>            <markdown> as_ast( as_tibble(rmd) ) #> ├── YAML [4 fields] #> ├── Heading [h1] - Setup #> │   └── Chunk [r, 1 line] - setup #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [5 lines] #>     │   ├── Chunk [r, 1 line] - cars #>     │   └── Chunk [r, 1 line] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [1 line] #>         ├── Chunk [r, 1 line] - pressure #>         └── Markdown [2 lines] cat(   as_document(rmd),   sep = \"\\n\" ) #> --- #> title: Minimal #> author: Colin Rundel #> date: 7/21/2020 #> output: html_document #> --- #> #> # Setup #> #> ```{r setup} #> #| include: false #> knitr::opts_chunk$set(echo = TRUE) #> ``` #> #> # Content #> #> ## R Markdown #> #> This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, #> PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>. #> #> When you click the **Knit** button a document will be generated that includes both content as well #> as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: #> #> #> ```{r cars} #> summary(cars) #> ``` #> #> ```{r unnamed-chunk-1} #> knitr::knit_patterns$get() #> ``` #> #> ## Including Plots #> #> You can also embed plots, for example: #> #> #> ```{r pressure} #> #| echo: false #> plot(pressure) #> ``` #> #> Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code #> that generated the plot. rmd = parse_rmd(system.file(\"examples/hw01-student.Rmd\", package=\"parsermd\")) rmd #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [4 lines] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [1 line] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Chunk [r, 5 lines] - plot-star #>         └── Chunk [r, 2 lines] - cor-star rmd_select(rmd, by_section( c(\"Exercise 1\", \"Solution\") )) #> ├── YAML [2 fields] #> └── Heading [h3] - Exercise 1 #>     └── Heading [h4] - Solution #>         └── Markdown [4 lines] rmd_select(rmd, by_section( c(\"Exercise 1\", \"Solution\") )) |>   as_document() #>  [1] \"---\"                                                 #>  [2] \"title: Lab 01 - Hello R\"                             #>  [3] \"output: html_document\"                               #>  [4] \"---\"                                                 #>  [5] \"\"                                                    #>  [6] \"### Exercise 1\"                                      #>  [7] \"\"                                                    #>  [8] \"#### Solution\"                                       #>  [9] \"\"                                                    #> [10] \"2 columns, 13 rows, 3 variables: \"                   #> [11] \"dataset: indicates which dataset the data are from \" #> [12] \"x: x-values \"                                        #> [13] \"y: y-values \"                                        #> [14] \"\"                                                    #> [15] \"\" rmd_select(rmd, by_section(c(\"Exercise 1\", \"Solution\")) & has_type(\"rmd_markdown\")) |>   as_document() #>  [1] \"---\"                                                 #>  [2] \"title: Lab 01 - Hello R\"                             #>  [3] \"output: html_document\"                               #>  [4] \"---\"                                                 #>  [5] \"\"                                                    #>  [6] \"2 columns, 13 rows, 3 variables: \"                   #>  [7] \"dataset: indicates which dataset the data are from \" #>  [8] \"x: x-values \"                                        #>  [9] \"y: y-values \"                                        #> [10] \"\"                                                    #> [11] \"\" rmd_select(rmd, by_section(c(\"Exercise 1\", \"Solution\"))) |>   rmd_select(has_type(\"rmd_markdown\")) |>   as_document() #>  [1] \"---\"                                                 #>  [2] \"title: Lab 01 - Hello R\"                             #>  [3] \"output: html_document\"                               #>  [4] \"---\"                                                 #>  [5] \"\"                                                    #>  [6] \"2 columns, 13 rows, 3 variables: \"                   #>  [7] \"dataset: indicates which dataset the data are from \" #>  [8] \"x: x-values \"                                        #>  [9] \"y: y-values \"                                        #> [10] \"\"                                                    #> [11] \"\" rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\"))) #> ├── YAML [2 fields] #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [4 lines] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [1 line] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Chunk [r, 5 lines] - plot-star #>         └── Chunk [r, 2 lines] - cor-star rmd_select(rmd, has_label(\"plot*\")) #> ├── YAML [2 fields] #> ├── Chunk [r, 5 lines] - plot-dino #> └── Chunk [r, 5 lines] - plot-star"},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started","text":"parsermd can installed CRAN : can install latest development version parsermd GitHub :","code":"install.packages(\"parsermd\") remotes::install_github(\"rundel/parsermd\") library(parsermd)"},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"parsing-rmds","dir":"Articles","previous_headings":"","what":"Parsing Rmds","title":"Getting Started","text":"basic example shows basic abstract syntax tree (AST) results parsing simple Rmd file, R Markdown document parsed stored flat, ordered list object containing tagged elements. default package present hierarchical view document chunks markdown text nested within headings, shown default print method rmd_ast objects. prefer see underlying flat structure, can printed setting flat = TRUE print. Additionally, ease manipulation AST package supports transformation object tidy tibble as_tibble .data.frame (return tibble). possible convert data frames back rmd_ast. Finally, can also convert rmd_ast back R Markdown document via as_document","code":"rmd = parsermd::parse_rmd(system.file(\"examples/minimal.Rmd\", package = \"parsermd\")) print(rmd) #> ├── YAML [4 fields] #> ├── Heading [h1] - Setup #> │   └── Chunk [r, 1 line] - setup #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [5 lines] #>     │   ├── Chunk [r, 1 line] - cars #>     │   └── Chunk [r, 1 line] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [1 line] #>         ├── Chunk [r, 1 line] - pressure #>         └── Markdown [2 lines] print(rmd, flat = TRUE) #> ├── YAML [4 fields] #> ├── Heading [h1] - Setup #> ├── Chunk [r, 1 line] - setup #> ├── Heading [h1] - Content #> ├── Heading [h2] - R Markdown #> ├── Markdown [5 lines] #> ├── Chunk [r, 1 line] - cars #> ├── Chunk [r, 1 line] - unnamed-chunk-1 #> ├── Heading [h2] - Including Plots #> ├── Markdown [1 line] #> ├── Chunk [r, 1 line] - pressure #> └── Markdown [2 lines] as_tibble(rmd) #> # A tibble: 12 × 5 #>    sec_h1  sec_h2          type         label           ast            #>    <chr>   <chr>           <chr>        <chr>           <list>         #>  1 <NA>    <NA>            rmd_yaml     <NA>            <yaml>         #>  2 Setup   <NA>            rmd_heading  <NA>            <heading [h1]> #>  3 Setup   <NA>            rmd_chunk    setup           <chunk [r]>    #>  4 Content <NA>            rmd_heading  <NA>            <heading [h1]> #>  5 Content R Markdown      rmd_heading  <NA>            <heading [h2]> #>  6 Content R Markdown      rmd_markdown <NA>            <markdown>     #>  7 Content R Markdown      rmd_chunk    cars            <chunk [r]>    #>  8 Content R Markdown      rmd_chunk    unnamed-chunk-1 <chunk [r]>    #>  9 Content Including Plots rmd_heading  <NA>            <heading [h2]> #> 10 Content Including Plots rmd_markdown <NA>            <markdown>     #> 11 Content Including Plots rmd_chunk    pressure        <chunk [r]>    #> 12 Content Including Plots rmd_markdown <NA>            <markdown> as_ast( as_tibble(rmd) ) #> ├── YAML [4 fields] #> ├── Heading [h1] - Setup #> │   └── Chunk [r, 1 line] - setup #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [5 lines] #>     │   ├── Chunk [r, 1 line] - cars #>     │   └── Chunk [r, 1 line] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [1 line] #>         ├── Chunk [r, 1 line] - pressure #>         └── Markdown [2 lines] cat(   as_document(rmd),   sep = \"\\n\" ) #> --- #> title: Minimal #> author: Colin Rundel #> date: 7/21/2020 #> output: html_document #> --- #> #> # Setup #> #> ```{r setup} #> #| include: false #> knitr::opts_chunk$set(echo = TRUE) #> ``` #> #> # Content #> #> ## R Markdown #> #> This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, #> PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>. #> #> When you click the **Knit** button a document will be generated that includes both content as well #> as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: #> #> #> ```{r cars} #> summary(cars) #> ``` #> #> ```{r unnamed-chunk-1} #> knitr::knit_patterns$get() #> ``` #> #> ## Including Plots #> #> You can also embed plots, for example: #> #> #> ```{r pressure} #> #| echo: false #> plot(pressure) #> ``` #> #> Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code #> that generated the plot."},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"working-with-the-ast","dir":"Articles","previous_headings":"","what":"Working with the AST","title":"Getting Started","text":"parsed R Markdown document, variety things can new abstract syntax tree (ast). demonstrate basic functionality within parsermd manipulate edit objects well check properties. Say interested examining solution student entered Exercise 1 - can get access using rmd_select function selection helper functions, specifically by_section helper. view content instead AST can use as_document() function, Note gives us Exercise 1 Solution headings contained markdown text, wanted markdown text can refine selector include nodes type rmd_markdown via has_type helper. approach uses tidyselect & operator within selection find intersection selectors by_section(c(\"Exercise 1\", \"Solution\")) has_type(\"rmd_markdown\"). Alternative result can achieved chaining multiple rmd_selects together, One useful feature by_section() has_label() selection helpers support glob style pattern matching. can following extract solutions document: Similarly, wanted just extract chunks involve plotting can match chunk labels “plot” prefix,","code":"rmd = parse_rmd(system.file(\"examples/hw01-student.Rmd\", package=\"parsermd\")) rmd #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [4 lines] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [1 line] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Chunk [r, 5 lines] - plot-star #>         └── Chunk [r, 2 lines] - cor-star rmd_select(rmd, by_section( c(\"Exercise 1\", \"Solution\") )) #> ├── YAML [2 fields] #> └── Heading [h3] - Exercise 1 #>     └── Heading [h4] - Solution #>         └── Markdown [4 lines] rmd_select(rmd, by_section( c(\"Exercise 1\", \"Solution\") )) |>   as_document() #>  [1] \"---\"                                                 #>  [2] \"title: Lab 01 - Hello R\"                             #>  [3] \"output: html_document\"                               #>  [4] \"---\"                                                 #>  [5] \"\"                                                    #>  [6] \"### Exercise 1\"                                      #>  [7] \"\"                                                    #>  [8] \"#### Solution\"                                       #>  [9] \"\"                                                    #> [10] \"2 columns, 13 rows, 3 variables: \"                   #> [11] \"dataset: indicates which dataset the data are from \" #> [12] \"x: x-values \"                                        #> [13] \"y: y-values \"                                        #> [14] \"\"                                                    #> [15] \"\" rmd_select(rmd, by_section(c(\"Exercise 1\", \"Solution\")) & has_type(\"rmd_markdown\")) |>   as_document() #>  [1] \"---\"                                                 #>  [2] \"title: Lab 01 - Hello R\"                             #>  [3] \"output: html_document\"                               #>  [4] \"---\"                                                 #>  [5] \"\"                                                    #>  [6] \"2 columns, 13 rows, 3 variables: \"                   #>  [7] \"dataset: indicates which dataset the data are from \" #>  [8] \"x: x-values \"                                        #>  [9] \"y: y-values \"                                        #> [10] \"\"                                                    #> [11] \"\" rmd_select(rmd, by_section(c(\"Exercise 1\", \"Solution\"))) |>   rmd_select(has_type(\"rmd_markdown\")) |>   as_document() #>  [1] \"---\"                                                 #>  [2] \"title: Lab 01 - Hello R\"                             #>  [3] \"output: html_document\"                               #>  [4] \"---\"                                                 #>  [5] \"\"                                                    #>  [6] \"2 columns, 13 rows, 3 variables: \"                   #>  [7] \"dataset: indicates which dataset the data are from \" #>  [8] \"x: x-values \"                                        #>  [9] \"y: y-values \"                                        #> [10] \"\"                                                    #> [11] \"\" rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\"))) #> ├── YAML [2 fields] #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [4 lines] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [1 line] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Chunk [r, 5 lines] - plot-star #>         └── Chunk [r, 2 lines] - cor-star rmd_select(rmd, has_label(\"plot*\")) #> ├── YAML [2 fields] #> ├── Chunk [r, 5 lines] - plot-dino #> └── Chunk [r, 5 lines] - plot-star"},{"path":"https://rundel.github.io/parsermd/articles/parsermd.html","id":"wildcards","dir":"Articles","previous_headings":"parsermd","what":"Wildcards","title":"Getting Started","text":"One useful feature by_section() has_label() selection helpers support glob style pattern matching. can following extract solutions document: Similarly, wanted just extract chunks involve plotting can match chunk labels “plot” prefix,","code":"rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\"))) #> ├── YAML [2 fields] #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [4 lines] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [1 line] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Chunk [r, 5 lines] - plot-star #>         └── Chunk [r, 2 lines] - cor-star rmd_select(rmd, has_label(\"plot*\")) #> ├── YAML [2 fields] #> ├── Chunk [r, 5 lines] - plot-dino #> └── Chunk [r, 5 lines] - plot-star"},{"path":"https://rundel.github.io/parsermd/articles/templates.html","id":"example---hw01","dir":"Articles","previous_headings":"","what":"Example - hw01","title":"Rmd Templates","text":"Imagine homework assignment distributed students form Rmd document named hw01.Rmd. document describes necessary tasks student complete also includes scaffolding form Rmd chunks markdown indicates students expected include solutions. can see examples templating extracting contents markdown Exercise 1 > Solution section. student completes assignment want able check included solutions appropriate sections. minimum means need check sections still exist, secondarily might also want check provided content solution differs provided scaffolding. begin subsetting original parsed document select elements contain student’s answers - assumes sections elements extraneous contain things like background, instructions, question text. use rmd_select select elements original document contained withing section matching “Exercise *” “Solution” cover answers three exercises. One limited set elements use rmd_template function generate template. included keep_content  = TRUE order keep scaffolded content answer compared student’s answers. One template constructed can compare new Rmd document via rmd_check_template function. Note can pass rmd_ast rmd_tibble object directly, path Rmd parsed compared. output can see several issues document submitted student, missing two expected markdown text entries Exercise 3 appears entered thing new chunks markdown Exercise 2. Let assume original template bit strict, like revise feedback giving students. decide Exercise 3 markdown text actually necessary, can remove requirement filtering elements rmd_sols rmd_tmpl. (Generally, former suggested workflow always work, later approach likely somewhat fragile changes made template format future releases.) use rmd_select ! operator remove specific markdown elements. new AST can passed rmd_template rmd_check_template provide revised feedback,","code":"(rmd = parse_rmd(system.file(\"examples/hw01.Rmd\", package = \"parsermd\"))) #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star rmd_select(   rmd,    by_section(c(\"Exercise 1\", \"Solution\")) &    has_type(\"rmd_markdown\") ) |>   as_document() #> [1] \"---\"                                                                               #> [2] \"title: Homework 01 - Hello R\"                                                      #> [3] \"output: html_document\"                                                             #> [4] \"---\"                                                                               #> [5] \"\"                                                                                  #> [6] \"(Type your answer to Exercise 1 here. This exercise does not require any R code.)\" #> [7] \"\"                                                                                  #> [8] \"\" (rmd_sols = rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\")))) #> ├── YAML [2 fields] #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star (rmd_tmpl = rmd_template(rmd_sols, keep_content = TRUE)) #> # A tibble: 9 × 5 #>   sec_h3     sec_h4   type         label     content   #>   <chr>      <chr>    <chr>        <chr>     <list>    #> 1 Exercise 1 Solution rmd_markdown <NA>      <chr [1]> #> 2 Exercise 2 Solution rmd_markdown <NA>      <chr [3]> #> 3 Exercise 2 Solution rmd_chunk    plot-dino <chr [5]> #> 4 Exercise 2 Solution rmd_markdown <NA>      <chr [1]> #> 5 Exercise 2 Solution rmd_chunk    cor-dino  <chr [2]> #> 6 Exercise 3 Solution rmd_markdown <NA>      <chr [3]> #> 7 Exercise 3 Solution rmd_chunk    plot-star <chr [1]> #> 8 Exercise 3 Solution rmd_markdown <NA>      <chr [1]> #> 9 Exercise 3 Solution rmd_chunk    cor-star  <chr [1]> file = system.file(\"examples/hw01-student.Rmd\", package = \"parsermd\") rmd_check_template(file, rmd_tmpl) #> ✖ The following required elements were missing in the document: #>   • Section \"Exercise 3\" > \"Solution\" is missing required \"markdown text\". #>   • Section \"Exercise 3\" > \"Solution\" is missing required \"markdown text\". #> ✖ The following document elements were unmodified from the template: #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"plot-dino\" #>     which has not been modified. #>   • Section \"Exercise 2\" > \"Solution\" has \"markdown text\" which has not been #>     modified. #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"cor-dino\" #>     which has not been modified. rmd_sols |>   rmd_select(      !(by_section(c(\"Exercise 3\", \"Solution\")) &      has_type(\"rmd_markdown\"))    ) #> ├── YAML [2 fields] #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Chunk [r, 1 line] - plot-star #>         └── Chunk [r, 1 line] - cor-star file = system.file(\"examples/hw01-student.Rmd\", package = \"parsermd\") rmd_sols |>   rmd_select(      !(by_section(c(\"Exercise 3\", \"Solution\")) &      has_type(\"rmd_markdown\"))    ) |>   rmd_template(keep_content = TRUE) |>   rmd_check_template(file, template = _) #> ✖ The following document elements were unmodified from the template: #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"plot-dino\" #>     which has not been modified. #>   • Section \"Exercise 2\" > \"Solution\" has \"markdown text\" which has not been #>     modified. #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"cor-dino\" #>     which has not been modified."},{"path":"https://rundel.github.io/parsermd/articles/templates.html","id":"constructing-a-template","dir":"Articles","previous_headings":"","what":"Constructing a template","title":"Rmd Templates","text":"begin subsetting original parsed document select elements contain student’s answers - assumes sections elements extraneous contain things like background, instructions, question text. use rmd_select select elements original document contained withing section matching “Exercise *” “Solution” cover answers three exercises. One limited set elements use rmd_template function generate template. included keep_content  = TRUE order keep scaffolded content answer compared student’s answers.","code":"(rmd_sols = rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\")))) #> ├── YAML [2 fields] #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star (rmd_tmpl = rmd_template(rmd_sols, keep_content = TRUE)) #> # A tibble: 9 × 5 #>   sec_h3     sec_h4   type         label     content   #>   <chr>      <chr>    <chr>        <chr>     <list>    #> 1 Exercise 1 Solution rmd_markdown <NA>      <chr [1]> #> 2 Exercise 2 Solution rmd_markdown <NA>      <chr [3]> #> 3 Exercise 2 Solution rmd_chunk    plot-dino <chr [5]> #> 4 Exercise 2 Solution rmd_markdown <NA>      <chr [1]> #> 5 Exercise 2 Solution rmd_chunk    cor-dino  <chr [2]> #> 6 Exercise 3 Solution rmd_markdown <NA>      <chr [3]> #> 7 Exercise 3 Solution rmd_chunk    plot-star <chr [1]> #> 8 Exercise 3 Solution rmd_markdown <NA>      <chr [1]> #> 9 Exercise 3 Solution rmd_chunk    cor-star  <chr [1]>"},{"path":"https://rundel.github.io/parsermd/articles/templates.html","id":"using-a-template","dir":"Articles","previous_headings":"","what":"Using a template","title":"Rmd Templates","text":"One template constructed can compare new Rmd document via rmd_check_template function. Note can pass rmd_ast rmd_tibble object directly, path Rmd parsed compared. output can see several issues document submitted student, missing two expected markdown text entries Exercise 3 appears entered thing new chunks markdown Exercise 2.","code":"file = system.file(\"examples/hw01-student.Rmd\", package = \"parsermd\") rmd_check_template(file, rmd_tmpl) #> ✖ The following required elements were missing in the document: #>   • Section \"Exercise 3\" > \"Solution\" is missing required \"markdown text\". #>   • Section \"Exercise 3\" > \"Solution\" is missing required \"markdown text\". #> ✖ The following document elements were unmodified from the template: #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"plot-dino\" #>     which has not been modified. #>   • Section \"Exercise 2\" > \"Solution\" has \"markdown text\" which has not been #>     modified. #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"cor-dino\" #>     which has not been modified."},{"path":"https://rundel.github.io/parsermd/articles/templates.html","id":"revising-a-template","dir":"Articles","previous_headings":"","what":"Revising a template","title":"Rmd Templates","text":"Let assume original template bit strict, like revise feedback giving students. decide Exercise 3 markdown text actually necessary, can remove requirement filtering elements rmd_sols rmd_tmpl. (Generally, former suggested workflow always work, later approach likely somewhat fragile changes made template format future releases.) use rmd_select ! operator remove specific markdown elements. new AST can passed rmd_template rmd_check_template provide revised feedback,","code":"rmd_sols |>   rmd_select(      !(by_section(c(\"Exercise 3\", \"Solution\")) &      has_type(\"rmd_markdown\"))    ) #> ├── YAML [2 fields] #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Chunk [r, 1 line] - plot-star #>         └── Chunk [r, 1 line] - cor-star file = system.file(\"examples/hw01-student.Rmd\", package = \"parsermd\") rmd_sols |>   rmd_select(      !(by_section(c(\"Exercise 3\", \"Solution\")) &      has_type(\"rmd_markdown\"))    ) |>   rmd_template(keep_content = TRUE) |>   rmd_check_template(file, template = _) #> ✖ The following document elements were unmodified from the template: #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"plot-dino\" #>     which has not been modified. #>   • Section \"Exercise 2\" > \"Solution\" has \"markdown text\" which has not been #>     modified. #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"cor-dino\" #>     which has not been modified."},{"path":"https://rundel.github.io/parsermd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Colin Rundel. Author, maintainer.","code":""},{"path":"https://rundel.github.io/parsermd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rundel C (2025). parsermd: Formal Parser Related Tools R Markdown Documents. R package version 0.2.0.9000, https://rundel.github.io/parsermd/.","code":"@Manual{,   title = {parsermd: Formal Parser and Related Tools for R Markdown Documents},   author = {Colin Rundel},   year = {2025},   note = {R package version 0.2.0.9000},   url = {https://rundel.github.io/parsermd/}, }"},{"path":"https://rundel.github.io/parsermd/index.html","id":"parsermd-","dir":"","previous_headings":"","what":"Formal Parser and Related Tools for R Markdown Documents","title":"Formal Parser and Related Tools for R Markdown Documents","text":"goal parsermd extract content R Markdown file allow programmatic interactions document’s contents (.e. code chunks markdown text). goal capture fundamental structure document attempt parse every detail Rmd. Specifically, yaml front matter, markdown text, R code read text lines allowing processed using tools.","code":""},{"path":"https://rundel.github.io/parsermd/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Formal Parser and Related Tools for R Markdown Documents","text":"parsermd can installed CRAN : can install latest development version parsermd GitHub :","code":"install.packages(\"parsermd\") remotes::install_github(\"rundel/parsermd\") library(parsermd)"},{"path":"https://rundel.github.io/parsermd/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Formal Parser and Related Tools for R Markdown Documents","text":"details see getting started vignette topic specific articles.","code":"(rmd = parsermd::parse_rmd(system.file(\"examples/minimal.Rmd\", package = \"parsermd\"))) #> ├── YAML [4 fields] #> ├── Heading [h1] - Setup #> │   └── Chunk [r, 1 line] - setup #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [5 lines] #>     │   ├── Chunk [r, 1 line] - cars #>     │   └── Chunk [r, 1 line] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [1 line] #>         ├── Chunk [r, 1 line] - pressure #>         └── Markdown [2 lines]  as_tibble(rmd) #> # A tibble: 12 × 5 #>    sec_h1  sec_h2          type         label           ast            #>    <chr>   <chr>           <chr>        <chr>           <list>         #>  1 <NA>    <NA>            rmd_yaml     <NA>            <yaml>         #>  2 Setup   <NA>            rmd_heading  <NA>            <heading [h1]> #>  3 Setup   <NA>            rmd_chunk    setup           <chunk [r]>    #>  4 Content <NA>            rmd_heading  <NA>            <heading [h1]> #>  5 Content R Markdown      rmd_heading  <NA>            <heading [h2]> #>  6 Content R Markdown      rmd_markdown <NA>            <markdown>     #>  7 Content R Markdown      rmd_chunk    cars            <chunk [r]>    #>  8 Content R Markdown      rmd_chunk    unnamed-chunk-1 <chunk [r]>    #>  9 Content Including Plots rmd_heading  <NA>            <heading [h2]> #> 10 Content Including Plots rmd_markdown <NA>            <markdown>     #> 11 Content Including Plots rmd_chunk    pressure        <chunk [r]>    #> 12 Content Including Plots rmd_markdown <NA>            <markdown>  rmd_select(rmd, by_section(\"Content\")) #> ├── YAML [4 fields] #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [5 lines] #>     │   ├── Chunk [r, 1 line] - cars #>     │   └── Chunk [r, 1 line] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [1 line] #>         ├── Chunk [r, 1 line] - pressure #>         └── Markdown [2 lines]  rmd_select(rmd, by_section(c(\"Content\", \"*\"))) |>   rmd_select(has_type(c(\"rmd_chunk\", \"rmd_heading\"))) #> ├── YAML [4 fields] #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Chunk [r, 1 line] - cars #>     │   └── Chunk [r, 1 line] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         └── Chunk [r, 1 line] - pressure  rmd_select(rmd, \"pressure\") #> ├── YAML [4 fields] #> └── Chunk [r, 1 line] - pressure  rmd_select(rmd, 1:3) #> ├── YAML [4 fields] #> └── Heading [h1] - Setup #>     └── Chunk [r, 1 line] - setup"},{"path":"https://rundel.github.io/parsermd/reference/as_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into an rmd_ast. — as_ast","title":"Convert an object into an rmd_ast. — as_ast","text":"Currently supports conversion rmd_tibble objects back rmd_ast.","code":""},{"path":"https://rundel.github.io/parsermd/reference/as_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into an rmd_ast. — as_ast","text":"","code":"as_ast(x, ...)"},{"path":"https://rundel.github.io/parsermd/reference/as_ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into an rmd_ast. — as_ast","text":"x Object convert ... Unused, extensibility.","code":""},{"path":"https://rundel.github.io/parsermd/reference/as_ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into an rmd_ast. — as_ast","text":"Returns rmd_ast object.","code":""},{"path":"https://rundel.github.io/parsermd/reference/as_ast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object into an rmd_ast. — as_ast","text":"","code":"parse_rmd(system.file(\"examples/hw01.Rmd\", package=\"parsermd\")) %>%   as_tibble() %>%   as_ast() #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star"},{"path":"https://rundel.github.io/parsermd/reference/as_document.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an rmd_ast, rmd_tibble, or any ast node into text. — as_document","title":"Convert an rmd_ast, rmd_tibble, or any ast node into text. — as_document","text":"Convert rmd_ast, rmd_tibble, ast node text.","code":""},{"path":"https://rundel.github.io/parsermd/reference/as_document.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an rmd_ast, rmd_tibble, or any ast node into text. — as_document","text":"","code":"as_document(x, padding = \"\", collapse = NULL, use_yaml_opts = TRUE, ...)"},{"path":"https://rundel.github.io/parsermd/reference/as_document.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an rmd_ast, rmd_tibble, or any ast node into text. — as_document","text":"x rmd_ast, rmd_tibble, parsermd node object. padding Padding add nodes assembling text. collapse NULL, use value collapse lines. use_yaml_opts Logical. Whether use YAML format chunk options (default TRUE). ... Passed to_ast() converting rmd_collection qmd_collection.","code":""},{"path":"https://rundel.github.io/parsermd/reference/as_document.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an rmd_ast, rmd_tibble, or any ast node into text. — as_document","text":"Returns character vector.","code":""},{"path":"https://rundel.github.io/parsermd/reference/chunk_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set code chunk options — chunk_options","title":"Get and set code chunk options — chunk_options","text":"Helper functions obtaining changing chunk options within rmd object.","code":""},{"path":"https://rundel.github.io/parsermd/reference/chunk_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set code chunk options — chunk_options","text":"","code":"rmd_set_options(x, ...)  rmd_get_options(x, ..., defaults = list(), yaml_style = TRUE)"},{"path":"https://rundel.github.io/parsermd/reference/chunk_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set code chunk options — chunk_options","text":"x rmd_ast, rmd_tibble, rmd ast node object. ... Either collection named values setter character values option names getter. defaults named list default values options. yaml_style logical, TRUE (default) return option names YAML style (hyphens), FALSE return normalized style (dots)","code":""},{"path":"https://rundel.github.io/parsermd/reference/chunk_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set code chunk options — chunk_options","text":"rmd_set_options returns modified version original object. rmd_get_options returns list requested options (options none specified). Non-chunk nodes return NULL.","code":""},{"path":"https://rundel.github.io/parsermd/reference/chunk_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set code chunk options — chunk_options","text":"","code":"rmd = parse_rmd(system.file(\"examples/minimal.Rmd\", package = \"parsermd\"))  str(rmd_get_options(rmd)) #> List of 12 #>  $ : NULL #>  $ : NULL #>  $ :List of 1 #>   ..$ include: logi FALSE #>  $ : NULL #>  $ : NULL #>  $ : NULL #>  $ : Named list() #>  $ : Named list() #>  $ : NULL #>  $ : NULL #>  $ :List of 1 #>   ..$ echo: logi FALSE #>  $ : NULL str(rmd_get_options(rmd, \"include\")) #> List of 12 #>  $ : NULL #>  $ : NULL #>  $ :List of 1 #>   ..$ include: logi FALSE #>  $ : NULL #>  $ : NULL #>  $ : NULL #>  $ :List of 1 #>   ..$ include: NULL #>  $ :List of 1 #>   ..$ include: NULL #>  $ : NULL #>  $ : NULL #>  $ :List of 1 #>   ..$ include: NULL #>  $ : NULL  # Get options in YAML style (default) vs normalized style chunk = rmd_chunk(\"r\", \"test\", options = list(`fig-width` = 8, eval = TRUE)) rmd_get_options(chunk, yaml_style = TRUE)   # fig-width #> $`fig-width` #> [1] 8 #>  #> $eval #> [1] TRUE #>  rmd_get_options(chunk, yaml_style = FALSE)  # fig.width #> $fig.width #> [1] 8 #>  #> $eval #> [1] TRUE #>   rmd_set_options(rmd, include = TRUE) #> ├── YAML [4 fields] #> ├── Heading [h1] - Setup #> │   └── Chunk [r, 1 line] - setup #> └── Heading [h1] - Content #>     ├── Heading [h2] - R Markdown #>     │   ├── Markdown [5 lines] #>     │   ├── Chunk [r, 1 line] - cars #>     │   └── Chunk [r, 1 line] - unnamed-chunk-1 #>     └── Heading [h2] - Including Plots #>         ├── Markdown [1 line] #>         ├── Chunk [r, 1 line] - pressure #>         └── Markdown [2 lines]"},{"path":"https://rundel.github.io/parsermd/reference/inline_code_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Inline code detection and extraction utilities — inline_code_utils","title":"Inline code detection and extraction utilities — inline_code_utils","text":"Functions detecting extracting inline code chunks AST nodes initial parsing phase.","code":""},{"path":"https://rundel.github.io/parsermd/reference/inline_code_utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inline code detection and extraction utilities — inline_code_utils","text":"","code":"rmd_has_inline_code(x, engine = NULL)  rmd_extract_inline_code(x, flatten = FALSE)"},{"path":"https://rundel.github.io/parsermd/reference/inline_code_utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inline code detection and extraction utilities — inline_code_utils","text":"x AST node, list nodes, character vector engine character vector, optional glob patterns matching inline code engine names. NULL (default), matches inline code. flatten Return flat list inline codes TRUE","code":""},{"path":"https://rundel.github.io/parsermd/reference/inline_code_utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inline code detection and extraction utilities — inline_code_utils","text":"rmd_has_inline_code(): logical vector indicating nodes contain inline code rmd_extract_inline_code(): list inline code objects found content","code":""},{"path":"https://rundel.github.io/parsermd/reference/parse_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a collection of R Markdown or Quarto document — parse_collection","title":"Parse a collection of R Markdown or Quarto document — parse_collection","text":"Recursively searches directory R Markdown Quarto documents parses collection rmd_ast objects","code":""},{"path":"https://rundel.github.io/parsermd/reference/parse_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a collection of R Markdown or Quarto document — parse_collection","text":"","code":"parse_qmd_collection(   dir = \"./\",   pattern = \"*.qmd\",   all = FALSE,   recurse = TRUE,   regex = FALSE )  parse_rmd_collection(   dir = \"./\",   pattern = \"*.Rmd\",   all = FALSE,   recurse = TRUE,   regex = FALSE )"},{"path":"https://rundel.github.io/parsermd/reference/parse_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a collection of R Markdown or Quarto document — parse_collection","text":"dir Directory search pattern Pattern match files, defaults glob syntax Search includes hidden files recurse Search recusively within dir regex Treat pattern regular expression syntax pattern","code":""},{"path":"https://rundel.github.io/parsermd/reference/parse_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a collection of R Markdown or Quarto document — parse_collection","text":"Returns tibble object columns document name, path, ast.","code":""},{"path":"https://rundel.github.io/parsermd/reference/parse_collection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a collection of R Markdown or Quarto document — parse_collection","text":"","code":"parse_rmd_collection(system.file(\"examples/\", package=\"parsermd\"))"},{"path":"https://rundel.github.io/parsermd/reference/parse_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse an R Markdown or Quarto document — parse_rmd","title":"Parse an R Markdown or Quarto document — parse_rmd","text":"Documents parsed rmd_ast object.","code":""},{"path":"https://rundel.github.io/parsermd/reference/parse_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse an R Markdown or Quarto document — parse_rmd","text":"","code":"parse_rmd(rmd)  parse_qmd(qmd)"},{"path":"https://rundel.github.io/parsermd/reference/parse_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse an R Markdown or Quarto document — parse_rmd","text":"rmd Either path Rmd file character vector containing contents R Markdown document. qmd Either path qmd file character vector containing contents Quarto document.","code":""},{"path":"https://rundel.github.io/parsermd/reference/parse_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse an R Markdown or Quarto document — parse_rmd","text":"Returns rmd_ast object.","code":""},{"path":"https://rundel.github.io/parsermd/reference/parse_rmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse an R Markdown or Quarto document — parse_rmd","text":"","code":"parse_rmd(system.file(\"examples/hw01.Rmd\", package=\"parsermd\")) #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star"},{"path":"https://rundel.github.io/parsermd/reference/parsermd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"parsermd: Formal Parser and Related Tools for R Markdown Documents — parsermd-package","title":"parsermd: Formal Parser and Related Tools for R Markdown Documents — parsermd-package","text":"implementation formal grammar parser R Markdown documents using Boost Spirit X3 library. also includes collection high level functions working resulting abstract syntax tree.","code":""},{"path":[]},{"path":"https://rundel.github.io/parsermd/reference/parsermd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"parsermd: Formal Parser and Related Tools for R Markdown Documents — parsermd-package","text":"Maintainer: Colin Rundel rundel@gmail.com","code":""},{"path":"https://rundel.github.io/parsermd/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>% pillar type_sum tibble as_tibble","code":""},{"path":"https://rundel.github.io/parsermd/reference/render.html","id":null,"dir":"Reference","previous_headings":"","what":"Render parsermd objects — render","title":"Render parsermd objects — render","text":"Object contents converted character vector written temporary directory rendering via quarto::quarto_render() rmarkdown::render(). Note function potential overwrite existing output files (e.g. .html, .pdf, etc).","code":""},{"path":"https://rundel.github.io/parsermd/reference/render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render parsermd objects — render","text":"","code":"render(x, name = NULL, ..., engine = c(\"quarto\", \"rmarkdown\"))"},{"path":"https://rundel.github.io/parsermd/reference/render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render parsermd objects — render","text":"x Object render, e.g. rmd_ast, rmd_tibble, character vector, etc. name Name output file, given inferred name x. ... additional arguments passed quarto::quarto_render() rmarkdown::render() engine rendering engine use, either \"quarto\" \"rmarkdown\".","code":""},{"path":"https://rundel.github.io/parsermd/reference/render.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render parsermd objects — render","text":"Returns results render function.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_ast_append.html","id":null,"dir":"Reference","previous_headings":"","what":"Append or preprend nodes to an ast — rmd_ast_append","title":"Append or preprend nodes to an ast — rmd_ast_append","text":"Functions adding nodes beginning end ast.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_ast_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append or preprend nodes to an ast — rmd_ast_append","text":"","code":"rmd_ast_append(x, ...)  rmd_ast_prepend(x, ...)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_ast_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append or preprend nodes to an ast — rmd_ast_append","text":"x object containing rmd_ast kind, e.g. rmd_ast, rmd_tibble, rmd_collection. ... collections ast nodes append prepend.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_ast_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append or preprend nodes to an ast — rmd_ast_append","text":"object class x","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_check_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Check an Rmd against a template — rmd_check_template","title":"Check an Rmd against a template — rmd_check_template","text":"function compares provided Rmd template reports discrepancies (e.g. missing unmodified components).","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_check_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check an Rmd against a template — rmd_check_template","text":"","code":"rmd_check_template(rmd, template, ...)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_check_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check an Rmd against a template — rmd_check_template","text":"rmd rmd check, can rmd_ast, rmd_tibble, text can handled parse_rmd. template rmd_template object rmd_template(). ... Unused, extensibility.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_check_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check an Rmd against a template — rmd_check_template","text":"Invisibly returns TRUE rmd matches template, FALSE otherwise.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_check_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check an Rmd against a template — rmd_check_template","text":"","code":"tmpl = parse_rmd(system.file(\"examples/hw01.Rmd\", package = \"parsermd\")) %>%   rmd_select(by_section(c(\"Exercise *\", \"Solution\"))) %>%   rmd_template(keep_content = TRUE)  rmd_check_template(   system.file(\"examples/hw01-student.Rmd\", package = \"parsermd\"),   tmpl ) #> ✖ The following required elements were missing in the document: #>   • Section \"Exercise 3\" > \"Solution\" is missing required \"markdown text\". #>   • Section \"Exercise 3\" > \"Solution\" is missing required \"markdown text\". #>  #> ✖ The following document elements were unmodified from the template: #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"plot-dino\" #>     which has not been modified. #>   • Section \"Exercise 2\" > \"Solution\" has \"markdown text\" which has not been #>     modified. #>   • Section \"Exercise 2\" > \"Solution\" has a \"code chunk\" named \"cor-dino\" #>     which has not been modified."},{"path":"https://rundel.github.io/parsermd/reference/rmd_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Code chunk node — rmd_chunk","title":"Code chunk node — rmd_chunk","text":"S7 class representing executable code chunk","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code chunk node — rmd_chunk","text":"","code":"rmd_chunk(   engine = \"r\",   label = \"\",   options = list(),   code = character(),   indent = \"\",   n_ticks = 3L )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code chunk node — rmd_chunk","text":"engine Character. Language engine label Character. Chunk label options List. Combined chunk options (traditional YAML) code Character vector. Code lines indent Character. Indentation n_ticks Integer. Number backticks","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_classes_s7.html","id":null,"dir":"Reference","previous_headings":"","what":"S7 Class Definitions for RMD Nodes — rmd_classes_s7","title":"S7 Class Definitions for RMD Nodes — rmd_classes_s7","text":"S7 classes representing R Markdown AST nodes automatic validation. classes inherit base rmd_node class provide type-safe object creation built-validation properties.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_classes_s7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S7 Class Definitions for RMD Nodes — rmd_classes_s7","text":"","code":"rmd_node()  rmd_ast(nodes = list())  rmd_yaml(yaml = list())"},{"path":"https://rundel.github.io/parsermd/reference/rmd_classes_s7.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S7 Class Definitions for RMD Nodes — rmd_classes_s7","text":"nodes List rmd_node objects AST container yaml List containing YAML frontmatter content","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_classes_s7.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S7 Class Definitions for RMD Nodes — rmd_classes_s7","text":"following S7 classes available creating R Markdown AST nodes:","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_classes_s7.html","id":"core-classes","dir":"Reference","previous_headings":"","what":"Core Classes","title":"S7 Class Definitions for RMD Nodes — rmd_classes_s7","text":"rmd_node() - Abstract base class R Markdown AST nodes. parent class specific node types instantiated directly. rmd_ast() - Container multiple nodes representing complete document AST.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_classes_s7.html","id":"content-nodes","dir":"Reference","previous_headings":"","what":"Content Nodes","title":"S7 Class Definitions for RMD Nodes — rmd_classes_s7","text":"rmd_yaml() - YAML frontmatter header containing document metadata. rmd_chunk() - Code chunks executable code various engines (R, Python, etc.). rmd_raw_chunk() - Raw code chunks executed. rmd_markdown() - Plain markdown text content. rmd_heading() - Section headings various levels (1-6).","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_classes_s7.html","id":"code-and-inline-elements","dir":"Reference","previous_headings":"","what":"Code and Inline Elements","title":"S7 Class Definitions for RMD Nodes — rmd_classes_s7","text":"rmd_code_block() - Fenced code blocks without execution. rmd_code_block_literal() - Code blocks literal {{...}} attributes. rmd_inline_code() - Inline code spans within markdown text. rmd_shortcode() - Quarto/Pandoc shortcodes special functionality. rmd_span() - Generic inline spans attributes.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_classes_s7.html","id":"structural-elements","dir":"Reference","previous_headings":"","what":"Structural Elements","title":"S7 Class Definitions for RMD Nodes — rmd_classes_s7","text":"rmd_fenced_div_open() - Opening tags fenced divs (:::). rmd_fenced_div_close() - Closing tags fenced divs (:::).","code":""},{"path":[]},{"path":"https://rundel.github.io/parsermd/reference/rmd_code_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Markdown code block node — rmd_code_block","title":"Markdown code block node — rmd_code_block","text":"S7 class representing fenced code block","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_code_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markdown code block node — rmd_code_block","text":"","code":"rmd_code_block(   id = character(),   classes = character(),   attr = character(),   code = character(),   indent = \"\",   n_ticks = 3L )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_code_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markdown code block node — rmd_code_block","text":"id Character vector. HTML ID (length 0 1) classes Character vector. CSS classes attr Named character vector. Key-value attributes (keys names) code Character vector. Code lines indent Character. Indentation n_ticks Integer. Number backticks","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_code_block_literal.html","id":null,"dir":"Reference","previous_headings":"","what":"Code block literal node — rmd_code_block_literal","title":"Code block literal node — rmd_code_block_literal","text":"S7 class representing code block {{...}} attributes","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_code_block_literal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code block literal node — rmd_code_block_literal","text":"","code":"rmd_code_block_literal(   attr = \"\",   code = character(),   indent = \"\",   n_ticks = 3L )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_code_block_literal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code block literal node — rmd_code_block_literal","text":"attr Character. Raw attribute content {{...}} code Character vector. Code lines indent Character. Indentation n_ticks Integer. Number backticks","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_fenced_div_close.html","id":null,"dir":"Reference","previous_headings":"","what":"Closing fenced div node — rmd_fenced_div_close","title":"Closing fenced div node — rmd_fenced_div_close","text":"S7 class representing closing fenced div","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_fenced_div_close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Closing fenced div node — rmd_fenced_div_close","text":"","code":"rmd_fenced_div_close()"},{"path":"https://rundel.github.io/parsermd/reference/rmd_fenced_div_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Opening fenced div node — rmd_fenced_div_open","title":"Opening fenced div node — rmd_fenced_div_open","text":"S7 class representing opening fenced div","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_fenced_div_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Opening fenced div node — rmd_fenced_div_open","text":"","code":"rmd_fenced_div_open(   id = character(),   classes = character(),   attr = character() )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_fenced_div_open.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Opening fenced div node — rmd_fenced_div_open","text":"id Character vector. HTML ID (length 0 1) classes Character vector. CSS classes attr Named character vector. Key-value attributes (keys names)","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_fenced_div_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap selected nodes with fenced divs — rmd_fenced_div_wrap","title":"Wrap selected nodes with fenced divs — rmd_fenced_div_wrap","text":"function wraps selected nodes rmd_ast fenced div opening closing tags. selection implemented using approach rmd_select() enables variety useful syntax selecting nodes. function checks selected indices form single continuous range. case error thrown. wrapping multiple discontinous ranges nodes desired allow_multiple can set TRUE.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_fenced_div_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap selected nodes with fenced divs — rmd_fenced_div_wrap","text":"","code":"rmd_fenced_div_wrap(   x,   ...,   open = rmd_fenced_div_open(),   allow_multiple = FALSE )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_fenced_div_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap selected nodes with fenced divs — rmd_fenced_div_wrap","text":"x Rmd object, e.g. rmd_ast rmd_tibble. ... One unquoted expressions separated commas node selection. Uses syntax rmd_select(). open rmd_fenced_div_open node defines opening fenced div. Defaults rmd_fenced_div_open(). allow_multiple Logical. FALSE (default), throws error selected indices discontinuous. TRUE, allows wrapping multiple discontinuous ranges separately.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_fenced_div_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap selected nodes with fenced divs — rmd_fenced_div_wrap","text":"Returns modified Rmd object selected nodes wrapped fenced div(s).","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_fenced_div_wrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap selected nodes with fenced divs — rmd_fenced_div_wrap","text":"","code":"rmd = parse_rmd(system.file(\"examples/hw01.Rmd\", package = \"parsermd\"))  rmd_fenced_div_wrap(rmd, \"plot-dino\":\"cor-dino\") #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Fenced div (open) <no attrs> #> │       │   ├── Chunk [r, 5 lines] - plot-dino #> │       │   ├── Markdown [1 line] #> │       │   └── Chunk [r, 2 lines] - cor-dino #> │       └── Fenced div (close)  #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star  rmd_fenced_div_wrap(rmd, has_type(\"rmd_chunk\"), allow_multiple=TRUE) #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> │   ├── Fenced div (open) <no attrs> #> │   │   └── Chunk [r, 2 lines] - load-packages #> │   └── Fenced div (close)  #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Fenced div (open) <no attrs> #> │       │   └── Chunk [r, 5 lines] - plot-dino #> │       ├── Fenced div (close)  #> │       ├── Markdown [1 line] #> │       ├── Fenced div (open) <no attrs> #> │       │   └── Chunk [r, 2 lines] - cor-dino #> │       └── Fenced div (close)  #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Fenced div (open) <no attrs> #>         │   └── Chunk [r, 1 line] - plot-star #>         ├── Fenced div (close)  #>         ├── Markdown [1 line] #>         ├── Fenced div (open) <no attrs> #>         │   └── Chunk [r, 1 line] - cor-star #>         └── Fenced div (close)   rmd_fenced_div_wrap(   rmd, has_type(\"rmd_chunk\"),   open = rmd_fenced_div_open(classes = \".note\"),   allow_multiple = TRUE ) #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> │   ├── Fenced div (open) [.note] #> │   │   └── Chunk [r, 2 lines] - load-packages #> │   └── Fenced div (close)  #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Fenced div (open) [.note] #> │       │   └── Chunk [r, 5 lines] - plot-dino #> │       ├── Fenced div (close)  #> │       ├── Markdown [1 line] #> │       ├── Fenced div (open) [.note] #> │       │   └── Chunk [r, 2 lines] - cor-dino #> │       └── Fenced div (close)  #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Fenced div (open) [.note] #>         │   └── Chunk [r, 1 line] - plot-star #>         ├── Fenced div (close)  #>         ├── Markdown [1 line] #>         ├── Fenced div (open) [.note] #>         │   └── Chunk [r, 1 line] - cor-star #>         └── Fenced div (close)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_heading.html","id":null,"dir":"Reference","previous_headings":"","what":"Heading node — rmd_heading","title":"Heading node — rmd_heading","text":"S7 class representing markdown heading","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_heading.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heading node — rmd_heading","text":"","code":"rmd_heading(name = character(0), level = integer(0))"},{"path":"https://rundel.github.io/parsermd/reference/rmd_heading.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heading node — rmd_heading","text":"name Character. Heading text level Integer. Heading level (1-6)","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_inline_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Inline code node — rmd_inline_code","title":"Inline code node — rmd_inline_code","text":"S7 class representing inline code","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_inline_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inline code node — rmd_inline_code","text":"","code":"rmd_inline_code(   engine = \"\",   code = \"\",   braced = FALSE,   start = -1L,   length = -1L )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_inline_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inline code node — rmd_inline_code","text":"engine Character. Language engine code Character. Code content braced Logical. Whether code braced start Integer. Start position length Integer. Length","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert nodes at specified locations — rmd_insert","title":"Insert nodes at specified locations — rmd_insert","text":"function inserts nodes rmd_ast specified locations relative selected nodes. selection implemented using approach rmd_select() enables variety useful syntax selecting nodes. function checks selected indices form continuous ranges can either insert range. allow_multiple parameter can used allow insertion based multiple discontinuous ranges.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert nodes at specified locations — rmd_insert","text":"","code":"rmd_insert(   x,   ...,   nodes,   location = c(\"before\", \"after\"),   allow_multiple = FALSE )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert nodes at specified locations — rmd_insert","text":"x Rmd object, e.g. rmd_ast rmd_tibble, insert nodes. ... One unquoted expressions separated commas node selection. Uses syntax rmd_select(). nodes Nodes insert. Can single rmd node object, list rmd node objects, rmd_ast object. location Character. Either \"\" \"\" specify insert relative selected nodes. \"\" inserts first node selected range, \"\" inserts last node selected range. allow_multiple Logical. FALSE (default), throws error selected indices discontinuous. TRUE, allows inserting multiple discontinuous locations.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert nodes at specified locations — rmd_insert","text":"Returns modified Rmd object nodes inserted specified locations.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_insert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert nodes at specified locations — rmd_insert","text":"","code":"rmd = parse_rmd(system.file(\"examples/hw01.Rmd\", package = \"parsermd\"))  new_nodes = list(   rmd_markdown(lines = \"This is a comment\"),   rmd_chunk(engine = \"r\", code = \"# New code\") ) rmd_insert(rmd, \"plot-dino\", nodes = new_nodes, location = \"after\") #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> │   └── Chunk [r, 2 lines] - load-packages #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       ├── Chunk [r, 1 line] -  #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star  new_heading = rmd_heading(name = \"Analysis\", level = 2L) rmd_insert(rmd, has_type(\"rmd_chunk\"), nodes = new_heading,             location = \"before\", allow_multiple = TRUE) #> ├── YAML [2 fields] #> ├── Heading [h3] - Load packages #> ├── Heading [h2] - Analysis #> │   ├── Chunk [r, 2 lines] - load-packages #> │   ├── Heading [h3] - Exercise 1 #> │   │   ├── Markdown [1 line] #> │   │   └── Heading [h4] - Solution #> │   │       └── Markdown [1 line] #> │   └── Heading [h3] - Exercise 2 #> │       ├── Markdown [1 line] #> │       └── Heading [h4] - Solution #> │           └── Markdown [3 lines] #> ├── Heading [h2] - Analysis #> │   ├── Chunk [r, 5 lines] - plot-dino #> │   └── Markdown [1 line] #> ├── Heading [h2] - Analysis #> │   ├── Chunk [r, 2 lines] - cor-dino #> │   └── Heading [h3] - Exercise 3 #> │       ├── Markdown [1 line] #> │       └── Heading [h4] - Solution #> │           └── Markdown [3 lines] #> ├── Heading [h2] - Analysis #> │   ├── Chunk [r, 1 line] - plot-star #> │   └── Markdown [1 line] #> └── Heading [h2] - Analysis #>     └── Chunk [r, 1 line] - cor-star  rmd_insert(rmd, c(1, 3, 5),    nodes = rmd_markdown(lines = \"Separator\"),    location = \"after\",    allow_multiple = TRUE) #> ├── YAML [2 fields] #> ├── Markdown [1 line] #> ├── Heading [h3] - Load packages #> │   ├── Chunk [r, 2 lines] - load-packages #> │   └── Markdown [1 line] #> ├── Heading [h3] - Exercise 1 #> │   ├── Markdown [1 line] #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   ├── Markdown [1 line] #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     ├── Markdown [1 line] #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star"},{"path":"https://rundel.github.io/parsermd/reference/rmd_markdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Markdown text node — rmd_markdown","title":"Markdown text node — rmd_markdown","text":"S7 class representing markdown text content","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_markdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markdown text node — rmd_markdown","text":"","code":"rmd_markdown(lines = character(0))"},{"path":"https://rundel.github.io/parsermd/reference/rmd_markdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markdown text node — rmd_markdown","text":"lines Character vector. Markdown text lines","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify nodes of an Rmd ast — rmd_modify","title":"Modify nodes of an Rmd ast — rmd_modify","text":"function applies function selected nodes rmd_ast rmd_tibble. selection implemented using approach rmd_select() enables variety useful syntax selecting nodes ast. function .f must return valid rmd node object (e.g., rmd_chunk, rmd_heading, etc.). results validated ensure maintain proper structure class.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify nodes of an Rmd ast — rmd_modify","text":"","code":"rmd_modify(x, .f, ...)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify nodes of an Rmd ast — rmd_modify","text":"x Rmd object, e.g. rmd_ast rmd_tibble. .f function apply selected nodes. Must return valid rmd node object. ... Selection arguments (unnamed) function arguments (named). Unnamed arguments used node selection using tidyselect syntax. Named arguments passed function .f.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_modify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify nodes of an Rmd ast — rmd_modify","text":"Returns modified Rmd object (either rmd_ast rmd_tibble depending input). selected nodes modified applying .f, unselected nodes remain unchanged.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_modify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify nodes of an Rmd ast — rmd_modify","text":"","code":"rmd = parse_rmd(system.file(\"examples/hw01.Rmd\", package = \"parsermd\"))  # Modify specific chunks by label f = function(node) { # Add a comment to the chunk   node@code = c(\"# Modified chunk\", node@code)   node } rmd_modify(rmd, .f = f, \"plot-dino\") |>   rmd_select(\"plot-dino\") |>   as_document() |>   cat(sep=\"\\n\") #> --- #> title: Homework 01 - Hello R #> output: html_document #> --- #>  #> ```{r plot-dino} #> #| fig-height: 3.0 #> #| fig-width: 6.0 #> # Modified chunk #> dino_data <- datasaurus_dozen %>% #>   filter(dataset == \"dino\") #>  #> ggplot(data = dino_data, mapping = aes(x = x, y = y)) + #>   geom_point() #> ``` #>   # Modify all chunks with named arguments passed to function f = function(node, prefix = \"## \") {   node@code = paste0(prefix, node@code)   node } rmd_modify(rmd, f, has_type(\"rmd_chunk\"), prefix = \"# \") |>  rmd_select(has_type(\"rmd_chunk\")) |>  as_document() |>  cat(sep=\"\\n\") #> --- #> title: Homework 01 - Hello R #> output: html_document #> --- #>  #> ```{r load-packages} #> #| message: false #> # library(tidyverse)  #> # library(datasauRus) #> ``` #>  #> ```{r plot-dino} #> #| fig-height: 3.0 #> #| fig-width: 6.0 #> # dino_data <- datasaurus_dozen %>% #> #   filter(dataset == \"dino\") #> #  #> # ggplot(data = dino_data, mapping = aes(x = x, y = y)) + #> #   geom_point() #> ``` #>  #> ```{r cor-dino} #> # dino_data %>% #> #   summarize(r = cor(x, y)) #> ``` #>  #> ```{r plot-star} #> #  #> ``` #>  #> ```{r cor-star} #> #  #> ``` #>"},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_sections.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the sections for each rmd object node — rmd_node_sections","title":"Find the sections for each rmd object node — rmd_node_sections","text":"Uses section headings rmd object identify hierarchical structure document.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_sections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the sections for each rmd object node — rmd_node_sections","text":"","code":"rmd_node_sections(x, levels = 1:6, drop_na = FALSE)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_sections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the sections for each rmd object node — rmd_node_sections","text":"x rmd object, e.g. rmd_ast rmd_tibble. levels Limit section heading levels return. drop_na NA sections dropped.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_sections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the sections for each rmd object node — rmd_node_sections","text":"list section names node.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_utilities.html","id":null,"dir":"Reference","previous_headings":"","what":"rmd node utility functions — rmd_node_utilities","title":"rmd node utility functions — rmd_node_utilities","text":"Functions extracting information Rmd nodes.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_utilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rmd node utility functions — rmd_node_utilities","text":"","code":"rmd_node_label(x)  rmd_node_label(x) <- value  # Default S3 method rmd_node_label(x) <- value  # S3 method for class 'rmd_chunk' rmd_node_label(x) <- value  rmd_node_type(x)  rmd_node_length(x)  rmd_node_content(x)  rmd_node_attr(x, attr)  rmd_node_engine(x)  rmd_node_options(x, yaml_style = TRUE)  rmd_node_code(x)  rmd_node_options(x) <- value  # Default S3 method rmd_node_options(x) <- value  # S3 method for class 'rmd_chunk' rmd_node_options(x) <- value  rmd_node_attr(x, attr) <- value  # Default S3 method rmd_node_attr(x, attr) <- value  # S3 method for class 'rmd_node' rmd_node_attr(x, attr) <- value  rmd_node_content(x) <- value  # Default S3 method rmd_node_content(x) <- value  # S3 method for class 'rmd_chunk' rmd_node_content(x) <- value  # S3 method for class 'rmd_raw_chunk' rmd_node_content(x) <- value  # S3 method for class 'rmd_markdown' rmd_node_content(x) <- value  # S3 method for class 'rmd_code_block' rmd_node_content(x) <- value  # S3 method for class 'rmd_code_block_literal' rmd_node_content(x) <- value  rmd_node_set_label(x, value)  rmd_node_set_options(x, ...)  rmd_node_set_content(x, value)  rmd_node_set_attr(x, attr, value)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_utilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rmd node utility functions — rmd_node_utilities","text":"x rmd object, e.g. rmd_ast rmd_tibble. value new value assign (assignment functions). attr Attribute name extract set. yaml_style logical, TRUE (default) return option names YAML style (hyphens), FALSE return normalized style (dots) ... rmd_node_set_options(), named arguments converted list options assign.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_utilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rmd node utility functions — rmd_node_utilities","text":"rmd_node_label() - returns character vector node labels, nodes without labels return NA. rmd_node_label<-() - assigns new labels chunk nodes. setter, returns modified object. rmd_node_type() - returns character vector node types. rmd_node_length() - returns integer vector node lengths (.e. lines code, lines text, etc.), nodes without length return NA. rmd_node_content() - returns raw character vector(s) node textual content (lines/code), nodes without content return NULL. rmd_node_attr() - returns value given node attribute (S7 property), returns NULL attribute exist. rmd_node_engine() - returns character vector chunk engines, NA node types. rmd_node_options() - returns list chunk node options (named list), NULL node types. Option names returned YAML style (hyphens) default, normalized style (dots) yaml_style = FALSE. rmd_node_options<-() - assigns new options chunk nodes merging existing options. Takes named list options. setter, returns modified object. rmd_node_attr<-() - assigns new attribute values nodes. setter, returns modified object. rmd_node_code() - returns list chunk node code (character vector), NULL node types. rmd_node_set_label() - pipeable version rmd_node_label<-() setting node labels. rmd_node_set_options() - pipeable version rmd_node_options<-() setting chunk options. rmd_node_set_attr() - pipeable version rmd_node_attr<-() setting node attributes. rmd_node_content<-() - assigns new content nodes. setter, returns modified object. rmd_node_set_content() - pipeable version rmd_node_content<-() setting node content.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_node_utilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rmd node utility functions — rmd_node_utilities","text":"","code":"rmd = parse_rmd(system.file(\"examples/hw01.Rmd\", package=\"parsermd\"))  rmd_node_label(rmd) #>  [1] NA              NA              \"load-packages\" NA              #>  [5] NA              NA              NA              NA              #>  [9] NA              NA              NA              \"plot-dino\"     #> [13] NA              \"cor-dino\"      NA              NA              #> [17] NA              NA              \"plot-star\"     NA              #> [21] \"cor-star\"      rmd_node_type(rmd) #>  [1] \"rmd_yaml\"     \"rmd_heading\"  \"rmd_chunk\"    \"rmd_heading\"  \"rmd_markdown\" #>  [6] \"rmd_heading\"  \"rmd_markdown\" \"rmd_heading\"  \"rmd_markdown\" \"rmd_heading\"  #> [11] \"rmd_markdown\" \"rmd_chunk\"    \"rmd_markdown\" \"rmd_chunk\"    \"rmd_heading\"  #> [16] \"rmd_markdown\" \"rmd_heading\"  \"rmd_markdown\" \"rmd_chunk\"    \"rmd_markdown\" #> [21] \"rmd_chunk\"    rmd_node_content(rmd) #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> [1] \"library(tidyverse) \" \"library(datasauRus)\" #>  #> [[4]] #> NULL #>  #> [[5]] #> [1] \"Based on the help file, how many rows and how many columns does the `datasaurus_dozen` file have? What are the variables included in the data frame? Add your responses to your lab report. When you're done, commit your changes with the commit message \\\"Added answer for Ex 1\\\", and push.\" #>  #> [[6]] #> NULL #>  #> [[7]] #> [1] \"(Type your answer to Exercise 1 here. This exercise does not require any R code.)\" #>  #> [[8]] #> NULL #>  #> [[9]] #> [1] \"Plot `y` vs. `x` for the `dino` dataset. Then, calculate the correlation coefficient between x and y for this dataset.\" #>  #> [[10]] #> NULL #>  #> [[11]] #> [1] \"(The answers for this Exercise are given for you below. But you should clean up some of the narrative so that it only includes what you want to turn in.)\" #> [2] \"\"                                                                                                                                                          #> [3] \"First let's plot the data in the dino dataset:\"                                                                                                            #>  #> [[12]] #> [1] \"dino_data <- datasaurus_dozen %>%\"                       #> [2] \"  filter(dataset == \\\"dino\\\")\"                           #> [3] \"\"                                                        #> [4] \"ggplot(data = dino_data, mapping = aes(x = x, y = y)) +\" #> [5] \"  geom_point()\"                                          #>  #> [[13]] #> [1] \"And next calculate the correlation between `x` and `y` in this dataset:\" #>  #> [[14]] #> [1] \"dino_data %>%\"              \"  summarize(r = cor(x, y))\" #>  #> [[15]] #> NULL #>  #> [[16]] #> [1] \"Plot `y` vs. `x` for the `star` dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?\" #>  #> [[17]] #> NULL #>  #> [[18]] #> [1] \"(Add code and narrative as needed. Note that the R chunks are labeled with `plot-star` and `cor-star` to provide spaces to place the code for plotting and calculating the correlation coefficient. To finish, clean up the narrative by removing these instructions.)\" #> [2] \"\"                                                                                                                                                                                                                                                                       #> [3] \"Blah blah blah...\"                                                                                                                                                                                                                                                      #>  #> [[19]] #> [1] \"\" #>  #> [[20]] #> [1] \"I'm some text, you should replace me with more meaningful text...\" #>  #> [[21]] #> [1] \"\" #>  rmd_node_attr(rmd, \"level\") #> [[1]] #> NULL #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> NULL #>  #> [[4]] #> [1] 3 #>  #> [[5]] #> NULL #>  #> [[6]] #> [1] 4 #>  #> [[7]] #> NULL #>  #> [[8]] #> [1] 3 #>  #> [[9]] #> NULL #>  #> [[10]] #> [1] 4 #>  #> [[11]] #> NULL #>  #> [[12]] #> NULL #>  #> [[13]] #> NULL #>  #> [[14]] #> NULL #>  #> [[15]] #> [1] 3 #>  #> [[16]] #> NULL #>  #> [[17]] #> [1] 4 #>  #> [[18]] #> NULL #>  #> [[19]] #> NULL #>  #> [[20]] #> NULL #>  #> [[21]] #> NULL #>  rmd_node_engine(rmd) #>  [1] NA  NA  \"r\" NA  NA  NA  NA  NA  NA  NA  NA  \"r\" NA  \"r\" NA  NA  NA  NA  \"r\" #> [20] NA  \"r\" rmd_node_options(rmd) #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> [[3]]$message #> [1] FALSE #>  #>  #> [[4]] #> NULL #>  #> [[5]] #> NULL #>  #> [[6]] #> NULL #>  #> [[7]] #> NULL #>  #> [[8]] #> NULL #>  #> [[9]] #> NULL #>  #> [[10]] #> NULL #>  #> [[11]] #> NULL #>  #> [[12]] #> [[12]]$`fig-height` #> [1] 3 #>  #> [[12]]$`fig-width` #> [1] 6 #>  #>  #> [[13]] #> NULL #>  #> [[14]] #> named list() #>  #> [[15]] #> NULL #>  #> [[16]] #> NULL #>  #> [[17]] #> NULL #>  #> [[18]] #> NULL #>  #> [[19]] #> named list() #>  #> [[20]] #> NULL #>  #> [[21]] #> named list() #>  rmd_node_code(rmd) #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> [1] \"library(tidyverse) \" \"library(datasauRus)\" #>  #> [[4]] #> NULL #>  #> [[5]] #> NULL #>  #> [[6]] #> NULL #>  #> [[7]] #> NULL #>  #> [[8]] #> NULL #>  #> [[9]] #> NULL #>  #> [[10]] #> NULL #>  #> [[11]] #> NULL #>  #> [[12]] #> [1] \"dino_data <- datasaurus_dozen %>%\"                       #> [2] \"  filter(dataset == \\\"dino\\\")\"                           #> [3] \"\"                                                        #> [4] \"ggplot(data = dino_data, mapping = aes(x = x, y = y)) +\" #> [5] \"  geom_point()\"                                          #>  #> [[13]] #> NULL #>  #> [[14]] #> [1] \"dino_data %>%\"              \"  summarize(r = cor(x, y))\" #>  #> [[15]] #> NULL #>  #> [[16]] #> NULL #>  #> [[17]] #> NULL #>  #> [[18]] #> NULL #>  #> [[19]] #> [1] \"\" #>  #> [[20]] #> NULL #>  #> [[21]] #> [1] \"\" #>   chunk = rmd_chunk(\"r\", \"example\", code = \"1 + 1\") rmd_node_label(chunk) #> [1] \"example\" rmd_node_label(chunk) = \"new_name\" rmd_node_label(chunk) #> [1] \"new_name\"  rmd_node_options(chunk) = list(eval = FALSE, echo = TRUE) rmd_node_options(chunk) #> $eval #> [1] FALSE #>  #> $echo #> [1] TRUE #>   rmd_node_attr(chunk, \"engine\") = \"python\" rmd_node_attr(chunk, \"engine\") #> [1] \"python\"  rmd_node_content(chunk) = c(\"x = 2\", \"y = 3\") rmd_node_content(chunk) #> [1] \"x = 2\" \"y = 3\"  chunk = rmd_chunk(\"r\", \"example\", code = \"1 + 1\") |>   rmd_node_set_label(\"new_label\") |>   rmd_node_set_options(eval = FALSE, echo = TRUE) |>   rmd_node_set_content(c(\"a = 1\", \"b = 2\"))  rmd_node_label(chunk) #> [1] \"new_label\" rmd_node_options(chunk) #> $eval #> [1] FALSE #>  #> $echo #> [1] TRUE #>  rmd_node_options(chunk, yaml_style = FALSE)  # get in normalized style #> $eval #> [1] FALSE #>  #> $echo #> [1] TRUE #>  rmd_node_content(chunk) #> [1] \"a = 1\" \"b = 2\"  chunk = rmd_chunk(\"r\", \"example\", code = \"x = 1\") |>   rmd_node_set_attr(\"engine\", \"python\")  rmd_node_engine(chunk) #> [1] \"python\""},{"path":"https://rundel.github.io/parsermd/reference/rmd_raw_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw chunk node — rmd_raw_chunk","title":"Raw chunk node — rmd_raw_chunk","text":"S7 class representing raw output chunk","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_raw_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw chunk node — rmd_raw_chunk","text":"","code":"rmd_raw_chunk(   format = character(0),   code = character(),   indent = \"\",   n_ticks = 3L )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_raw_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw chunk node — rmd_raw_chunk","text":"format Character. Output format code Character vector. Code lines indent Character. Indentation n_ticks Integer. Number backticks","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select nodes of an Rmd ast — rmd_select","title":"Select nodes of an Rmd ast — rmd_select","text":"function implemented using tidyselect::eval_select() enables variety useful syntax selecting nodes ast. Additionally, number parsermd helpers available: by_section(), has_type(), has_label(), has_option().","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select nodes of an Rmd ast — rmd_select","text":"","code":"rmd_select(x, ..., keep_yaml = TRUE)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select nodes of an Rmd ast — rmd_select","text":"x Rmd object, e.g. rmd_ast rmd_tibble. ... One unquoted expressions separated commas. Chunk labels can used positions data frame, expressions like x:y can used select range nodes. keep_yaml Logical, whether automatically include YAML nodes selection. TRUE (default), equivalent including has_type(\"rmd_yaml\") selection.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select nodes of an Rmd ast — rmd_select","text":"Returns subset Rmd object (either rmd_ast rmd_tibble depending input).","code":""},{"path":[]},{"path":"https://rundel.github.io/parsermd/reference/rmd_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select nodes of an Rmd ast — rmd_select","text":"","code":"rmd = parse_rmd(system.file(\"examples/hw01.Rmd\", package = \"parsermd\"))  rmd_select(rmd, \"plot-dino\", \"cor-dino\") #> ├── YAML [2 fields] #> ├── Chunk [r, 5 lines] - plot-dino #> └── Chunk [r, 2 lines] - cor-dino rmd_select(rmd, \"plot-dino\":\"cor-dino\") #> ├── YAML [2 fields] #> ├── Chunk [r, 5 lines] - plot-dino #> ├── Markdown [1 line] #> └── Chunk [r, 2 lines] - cor-dino rmd_select(rmd, `plot-dino`:`cor-dino`) #> ├── YAML [2 fields] #> ├── Chunk [r, 5 lines] - plot-dino #> ├── Markdown [1 line] #> └── Chunk [r, 2 lines] - cor-dino  rmd_select(rmd, has_type(\"rmd_chunk\")) #> ├── YAML [2 fields] #> ├── Chunk [r, 2 lines] - load-packages #> ├── Chunk [r, 5 lines] - plot-dino #> ├── Chunk [r, 2 lines] - cor-dino #> ├── Chunk [r, 1 line] - plot-star #> └── Chunk [r, 1 line] - cor-star  rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\"))) #> ├── YAML [2 fields] #> ├── Heading [h3] - Exercise 1 #> │   └── Heading [h4] - Solution #> │       └── Markdown [1 line] #> ├── Heading [h3] - Exercise 2 #> │   └── Heading [h4] - Solution #> │       ├── Markdown [3 lines] #> │       ├── Chunk [r, 5 lines] - plot-dino #> │       ├── Markdown [1 line] #> │       └── Chunk [r, 2 lines] - cor-dino #> └── Heading [h3] - Exercise 3 #>     └── Heading [h4] - Solution #>         ├── Markdown [3 lines] #>         ├── Chunk [r, 1 line] - plot-star #>         ├── Markdown [1 line] #>         └── Chunk [r, 1 line] - cor-star"},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Rmd selection helper functions — rmd_select_helpers","title":"Rmd selection helper functions — rmd_select_helpers","text":"functions used conjunction rmd_select() select nodes Rmd ast. by_section() - uses section selectors select nodes. has_type() - selects nodes given type(s). has_label() - selects nodes labels matching given glob. has_heading() - selects heading nodes () titles matching given glob pattern(s). has_option() - selects nodes given option(s) set. has_shortcode() - selects nodes containing shortcodes matching given function name(s). by_fenced_div() - selects fenced div sections matching specified id, class, /attributes.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rmd selection helper functions — rmd_select_helpers","text":"","code":"has_type(types)  by_section(sec_ref, keep_parents = TRUE)  has_label(label)  has_heading(heading)  has_code(code)  has_option(...)  has_shortcode(func_name = NULL)  has_inline_code(engine = NULL)  by_fenced_div(id = NULL, class = NULL, attr = NULL)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rmd selection helper functions — rmd_select_helpers","text":"types Vector character type names, e.g. rmd_chunk, rmd_heading, etc. sec_ref character vector, section reference selector. See details details constructed. keep_parents Logical, retain parent headings selected sections. Default: TRUE label character vector, glob patterns matching chunk labels. heading character vector, glob patterns matching heading titles. code character vector, regex patterns matching chunk code line(s) ... Either option names represented scalar string named argument form opt = value opt option name value value checked. example eval = TRUE check option eval set TRUE. func_name character vector, optional glob patterns matching shortcode function names. NULL (default), matches shortcode. engine character vector, optional glob patterns matching inline code engine names. NULL (default), matches inline code. id Character, optional ID match (without # prefix) class Character vector, optional class names match (. prefix). specified classes must present fenced div (subset matching). attr Either character vector attribute names check existence, named list/vector names attribute names values must match exactly.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rmd selection helper functions — rmd_select_helpers","text":"helper functions return integer vector selected indexes.","code":""},{"path":[]},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":"section-reference-selectors","dir":"Reference","previous_headings":"","what":"Section reference selectors","title":"Rmd selection helper functions — rmd_select_helpers","text":"Section reference selectors simplified version CSS selectors designed enable selection nodes way respects implied hierarchy document's section headings. consist character vector heading names subsequent value assumed nested within preceding value. example, section selector c(\"Sec 1\", \"Sec 2\") select nodes contained within section named Sec 2 turn contained within section named Sec 1 (section contained within section named Sec 1, ). individual section names can specified using wildcards (aka globbing patterns), may match one sections within document, e.g. c(\"Sec 1\", \"Sec *\"). See utils::glob2rx() wikipedia details syntax patterns.","code":""},{"path":[]},{"path":"https://rundel.github.io/parsermd/reference/rmd_select_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rmd selection helper functions — rmd_select_helpers","text":"","code":"rmd = parse_rmd(system.file(\"examples/hw01.Rmd\", package=\"parsermd\"))  rmd_select(rmd, has_type(\"rmd_chunk\")) #> ├── YAML [2 fields] #> ├── Chunk [r, 2 lines] - load-packages #> ├── Chunk [r, 5 lines] - plot-dino #> ├── Chunk [r, 2 lines] - cor-dino #> ├── Chunk [r, 1 line] - plot-star #> └── Chunk [r, 1 line] - cor-star  rmd_select(rmd, has_label(\"*dino\")) #> ├── YAML [2 fields] #> ├── Chunk [r, 5 lines] - plot-dino #> └── Chunk [r, 2 lines] - cor-dino  rmd_select(rmd, has_heading(\"Exercise *\")) #> ├── YAML [2 fields] #> ├── Heading [h3] - Exercise 1 #> ├── Heading [h3] - Exercise 2 #> └── Heading [h3] - Exercise 3  rmd_select(rmd, has_option(\"message\")) #> ├── YAML [2 fields] #> └── Chunk [r, 2 lines] - load-packages rmd_select(rmd, has_option(message = FALSE)) #> ├── YAML [2 fields] #> └── Chunk [r, 2 lines] - load-packages rmd_select(rmd, has_option(message = TRUE)) #> └── YAML [2 fields]  rmd_select(rmd, has_shortcode()) #> └── YAML [2 fields] rmd_select(rmd, has_shortcode(\"video\")) #> └── YAML [2 fields]  fdiv = parse_rmd(system.file(\"examples/fenced-divs.qmd\", package=\"parsermd\"))  rmd_select(fdiv, by_fenced_div())  # Select all fenced div pairs #> ├── YAML [2 fields] #> ├── Fenced div (open) [.note] #> │   └── Markdown [1 line] #> ├── Fenced div (close)  #> ├── Fenced div (open) [.warning, .important] #> │   └── Markdown [2 lines] #> ├── Fenced div (close)  #> ├── Fenced div (open) [.info] #> │   └── Markdown [1 line] #> ├── Fenced div (close)  #> ├── Fenced div (open) [#special-section, .sidebar] #> │   └── Markdown [2 lines] #> ├── Fenced div (close)  #> ├── Fenced div (open) [.callout-note, icon=\"true\"] #> │   └── Markdown [1 line] #> ├── Fenced div (close)  #> ├── Fenced div (open) [.callout-warning, collapse=\"true\"] #> │   └── Markdown [3 lines] #> ├── Fenced div (close)  #> ├── Fenced div (open) [.outer] #> │   └── Markdown [1 line] #> ├── Fenced div (open) [.inner] #> │   └── Markdown [1 line] #> ├── Fenced div (close)  #> │   └── Markdown [1 line] #> ├── Fenced div (close)  #> ├── Fenced div (open) [#example-complex, .demo, .interactive, data-toggle=\"collapse\", aria-expanded=\"false\"] #> │   └── Markdown [4 lines] #> ├── Fenced div (close)  #> ├── Fenced div (open) [.note] #> │   └── Markdown [1 line] #> └── Fenced div (close)  rmd_select(fdiv, by_fenced_div(class = \"note\")) #> Warning: Classes \"note\" should start with '.' prefix, adding it automatically #> ├── YAML [2 fields] #> ├── Fenced div (open) [.note] #> │   └── Markdown [1 line] #> ├── Fenced div (close)  #> ├── Fenced div (open) [.note] #> │   └── Markdown [1 line] #> └── Fenced div (close)  rmd_select(fdiv, by_fenced_div(id = \"special-section\")) #> Warning: ID \"special-section\" should start with '#' prefix, adding it automatically #> ├── YAML [2 fields] #> ├── Fenced div (open) [#special-section, .sidebar] #> │   └── Markdown [2 lines] #> └── Fenced div (close)  rmd_select(fdiv, by_fenced_div(class = c(\"warning\", \"important\"))) #> Warning: Classes \"warning\" and \"important\" should start with '.' prefix, adding it #> automatically #> ├── YAML [2 fields] #> ├── Fenced div (open) [.warning, .important] #> │   └── Markdown [2 lines] #> └── Fenced div (close)  rmd_select(fdiv, by_fenced_div(attr = \"icon\")) #> ├── YAML [2 fields] #> ├── Fenced div (open) [.callout-note, icon=\"true\"] #> │   └── Markdown [1 line] #> └── Fenced div (close)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_shortcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortcode node — rmd_shortcode","title":"Shortcode node — rmd_shortcode","text":"S7 class representing shortcode function call","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_shortcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortcode node — rmd_shortcode","text":"","code":"rmd_shortcode(   func = character(0),   args = character(),   start = -1L,   length = -1L )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_shortcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortcode node — rmd_shortcode","text":"func Character. Function name args Character vector. Function arguments start Integer. Start position length Integer. Length","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Source the code chunks of an Rmd document — rmd_source","title":"Source the code chunks of an Rmd document — rmd_source","text":"equivalent source() function Rmd files resulting asts.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source the code chunks of an Rmd document — rmd_source","text":"","code":"rmd_source(x, local = FALSE, ..., label_comment = TRUE, use_eval = TRUE)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source the code chunks of an Rmd document — rmd_source","text":"x Rmd document (e.g. rmd_ast, rmd_tibble, Rmd file path, etc.) local TRUE, FALSE environment, determining parsed expressions evaluated. FALSE (default) corresponds user's workspace (global environment) TRUE environment source called. ... Additional arguments passed source. label_comment Attach chunk labels comment code block. use_eval Use eval chunk option determine code included.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source the code chunks of an Rmd document — rmd_source","text":"Returns result source() R code chunks.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source the code chunks of an Rmd document — rmd_source","text":"","code":"rmd_source(system.file(\"examples/minimal.Rmd\", package = \"parsermd\"), echo=TRUE) #> > knitr::opts_chunk$set(echo = TRUE) #> > summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00   #> > knitr::knit_patterns$get() #> $chunk.begin #> NULL #>  #> $chunk.end #> NULL #>  #> $chunk.code #> NULL #>  #> $inline.code #> NULL #>  #> $global.options #> NULL #>  #> $input.doc #> NULL #>  #> $ref.chunk #> NULL #>  #> $header.begin #> NULL #>  #> $document.begin #> NULL #>  #> > plot(pressure)"},{"path":"https://rundel.github.io/parsermd/reference/rmd_span.html","id":null,"dir":"Reference","previous_headings":"","what":"Span node — rmd_span","title":"Span node — rmd_span","text":"S7 class representing span attributes","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_span.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Span node — rmd_span","text":"","code":"rmd_span(   text = \"\",   id = character(),   classes = character(),   attr = character() )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_span.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Span node — rmd_span","text":"text Character. Span text content id Character vector. HTML ID (length 0 1) classes Character vector. CSS classes attr Named character vector. Additional attributes","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a template from an rmd object. — rmd_template","title":"Create a template from an rmd object. — rmd_template","text":"Templates objects meant capture structure R Markdown document facilitate comparison template new Rmd documents, usually ensure structure /content matches sufficiently.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a template from an rmd object. — rmd_template","text":"","code":"rmd_template(   rmd,   keep_content = FALSE,   keep_labels = TRUE,   keep_headings = FALSE,   keep_yaml = FALSE,   ... )"},{"path":"https://rundel.github.io/parsermd/reference/rmd_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a template from an rmd object. — rmd_template","text":"rmd R Markdown document form rmd_ast rmd_tibble. keep_content template keep document's content (markdown text chunk code). keep_labels template keep document's code chunk labels. keep_headings template keep document's headings. keep_yaml template keep document's yaml. ... Unused, extensibility.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a template from an rmd object. — rmd_template","text":"Returns rmd_template object, derived tibble containing relevant structural details document.","code":""},{"path":"https://rundel.github.io/parsermd/reference/rmd_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a template from an rmd object. — rmd_template","text":"","code":"rmd = parse_rmd(system.file(\"examples/hw01.Rmd\", package=\"parsermd\"))  rmd_select(rmd, by_section(c(\"Exercise *\", \"Solution\"))) %>%   rmd_template() #> # A tibble: 9 × 4 #>   sec_h3     sec_h4   type         label     #>   <chr>      <chr>    <chr>        <chr>     #> 1 Exercise 1 Solution rmd_markdown NA        #> 2 Exercise 2 Solution rmd_markdown NA        #> 3 Exercise 2 Solution rmd_chunk    plot-dino #> 4 Exercise 2 Solution rmd_markdown NA        #> 5 Exercise 2 Solution rmd_chunk    cor-dino  #> 6 Exercise 3 Solution rmd_markdown NA        #> 7 Exercise 3 Solution rmd_chunk    plot-star #> 8 Exercise 3 Solution rmd_markdown NA        #> 9 Exercise 3 Solution rmd_chunk    cor-star"},{"path":"https://rundel.github.io/parsermd/reference/shortcode_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortcode detection and extraction utilities — shortcode_utils","title":"Shortcode detection and extraction utilities — shortcode_utils","text":"Functions detecting extracting shortcodes AST nodes initial parsing phase.","code":""},{"path":"https://rundel.github.io/parsermd/reference/shortcode_utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortcode detection and extraction utilities — shortcode_utils","text":"","code":"rmd_has_shortcode(x, func_name = NULL)  rmd_extract_shortcodes(x, flatten = FALSE)"},{"path":"https://rundel.github.io/parsermd/reference/shortcode_utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortcode detection and extraction utilities — shortcode_utils","text":"x AST node, list nodes, character vector func_name character vector, optional glob patterns matching shortcode function names. NULL (default), matches shortcode. flatten Return flat list shortcodes TRUE","code":""},{"path":"https://rundel.github.io/parsermd/reference/shortcode_utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortcode detection and extraction utilities — shortcode_utils","text":"rmd_has_shortcode(): logical vector indicating nodes contain shortcodes rmd_extract_shortcodes(): list shortcode objects found content","code":""},{"path":"https://rundel.github.io/parsermd/reference/span_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Span detection and extraction utilities — span_utils","title":"Span detection and extraction utilities — span_utils","text":"Functions detecting extracting spans AST nodes initial parsing phase.","code":""},{"path":"https://rundel.github.io/parsermd/reference/span_utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Span detection and extraction utilities — span_utils","text":"","code":"rmd_has_span(x)  rmd_extract_spans(x, flatten = FALSE)"},{"path":"https://rundel.github.io/parsermd/reference/span_utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Span detection and extraction utilities — span_utils","text":"x AST node, list nodes, character vector flatten Return flat list spans TRUE","code":""},{"path":"https://rundel.github.io/parsermd/reference/span_utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Span detection and extraction utilities — span_utils","text":"rmd_has_span(): logical vector indicating nodes contain spans rmd_extract_spans(): list span objects found content","code":""},{"path":[]},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-020-development-version","dir":"Changelog","previous_headings":"","what":"parsermd 0.2.0 (development version)","title":"parsermd 0.2.0 (development version)","text":"CRAN release: 2025-08-19 Breaking Change: Migrated S3/S4 classes S7 classes AST node types (rmd_ast, rmd_chunk, rmd_heading, etc.) Breaking Change: Removed deprecated rmd_subset() related helper functions (rmd_get_node(), rmd_get_chunk(), rmd_get_markdown(), rmd_has_node(), rmd_has_chunk(), rmd_has_markdown()). Use rmd_select() tidyselect syntax instead. Added support yaml chunk options - e.g. (#| echo: false) Added support fenced divs - e.g. (::: {.class} ... :::) Added support markdown code blocks Added support yaml expressions - e.g. (!expr) Added support parsing collections Rmd qmd files - see parse_qmd_collection() parse_rmd_collection() Removed option parse yaml - now always parsed. Based yaml node classes simplified just include rmd_yaml. Added support Pandoc-style ordered fenced attributes code blocks, fenced divs, spans Added rmd_fenced_div_wrap() function wrap selected nodes fenced divs Added rmd_insert() function insert nodes relative selected nodes Added support code block literals - e.g. ```{{r}} Added support 2ndary parsing handle inline elements: quarto shortcodes, inline code, spans Enhanced rmd_select() functionality node manipulation Added has_heading() helper function selecting heading nodes using glob patterns Added by_fenced_div() helper function selecting fenced div sections using attribute patterns Added keep_yaml argument rmd_select() (defaults TRUE) automatically include YAML nodes selections","code":""},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-013","dir":"Changelog","previous_headings":"","what":"parsermd 0.1.3","title":"parsermd 0.1.3","text":"CRAN release: 2024-01-16 Unlabeled chunks now labeled unnamed-chunk-n, n incrementing. Minor fixes updates resolve CRAN warnings.","code":""},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-012","dir":"Changelog","previous_headings":"","what":"parsermd 0.1.2","title":"parsermd 0.1.2","text":"CRAN release: 2021-05-20 Fix compilation issues older GCC versions (e.g. GCC@5 Solaris)","code":""},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-011","dir":"Changelog","previous_headings":"","what":"parsermd 0.1.1","title":"parsermd 0.1.1","text":"CRAN release: 2021-05-19 Fix issue Linux using LANG=en_US.iso88591 (LANG=en_US.iso88591 LC_ALL=en_US.iso88591 R CMD check)","code":""},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-010","dir":"Changelog","previous_headings":"","what":"parsermd 0.1.0","title":"parsermd 0.1.0","text":"CRAN release: 2021-05-10 Added new parser error reporting system Adopt testthat 3.0.0 testing Added new render function support rendering rmd_ast related objects Added rmd_get_options rmd_set_options Added support raw attribute chunks (#13) Added rmd_source support sourcing chunks directly environment. Added rmd_select uses tidyselect based syntax replacement rmd_subset. Soft deprecated rmd_subset, rmd_get_node, rmd_get_markdwon, rmd_get_chunk.","code":""},{"path":"https://rundel.github.io/parsermd/news/index.html","id":"parsermd-001","dir":"Changelog","previous_headings":"","what":"parsermd 0.0.1","title":"parsermd 0.0.1","text":"Added NEWS.md file track changes package. Incremented version number. Overhauled ast tibble representations make compatible possible. Starting add helper functions: rmd_subset, rmd_has_node, rmd_get_node, etc. Initial implementation Rmd templates","code":""}]
